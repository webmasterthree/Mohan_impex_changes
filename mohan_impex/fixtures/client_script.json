[
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Supplier Quotation",
        "enabled": 0,
        "modified": "2024-12-27 11:21:43.010193",
        "module": "Mohan Impex",
        "name": "Brand Name for SP",
        "script": "frappe.ui.form.on('Supplier Quotation Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n\n\n ",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Purchase Invoice",
        "enabled": 0,
        "modified": "2024-12-27 11:24:45.610129",
        "module": "Mohan Impex",
        "name": "Brand Name for PI",
        "script": "frappe.ui.form.on('Purchase Invoice Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Request for Quotation",
        "enabled": 0,
        "modified": "2024-12-27 11:29:30.065023",
        "module": "Mohan Impex",
        "name": "Request for Quotation Item",
        "script": "frappe.ui.form.on('Request for Quotation Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Employee",
        "enabled": 0,
        "modified": "2024-12-27 18:06:25.392543",
        "module": "Mohan Impex",
        "name": "Total Number in MI",
        "script": "frappe.ui.form.on('Employee', {\n\trefresh(frm) {\n\t\t// Ensure that we set the value if the 'date_of_joining' is already set when the form lo\n\t},\n\tbefore_save(frm){\n\t    if (frm.doc.date_of_joining) {\n\t\t\tupdate_years_months_days(frm);\n\t\t}\n\t},\n\t// This will trigger whenever 'date_of_joining' field is changed\n\tdate_of_joining: function (frm) {\n\t\t// When the date_of_joining is changed, recalculate years, months, and days\n\t\tif (frm.doc.date_of_joining) {\n\t\t\tupdate_years_months_days(frm);\n\t\t}\n\t}\n});\nfunction update_years_months_days(frm) {\n\tconst joining_date = frm.doc.date_of_joining;\n\tconst current_date = frappe.datetime.nowdate();\n\t// Calculate the difference in days\n\tconst total_days_diff = frappe.datetime.get_diff(current_date, joining_date);\n\t// Calculate the number of full years\n\tconst years = Math.floor(total_days_diff / 365);\n\t// Calculate the remaining days after extracting years\n\tconst remaining_days_after_years = total_days_diff - years * 365;\n\t// Calculate the number of full months\n\tconst months = Math.floor(remaining_days_after_years / 30); // Approximate months (30 days p\n\t// Calculate the remaining days after extracting months\n\tconst remaining_days = remaining_days_after_years - months * 30; // Approximate remaining da\n\t// Format the result as \"X years Y months Z days\"\n\tlet years_and_months_days = `${years} years`;\n\tif (months > 0) {\n\t\tyears_and_months_days += ` ${months} months`;\n\t}\n\tif (remaining_days > 0) {\n\t\tyears_and_months_days += ` ${remaining_days} days`;\n\t}\n\t// Set the value in the custom field\n\tfrm.set_value('custom__total_number_of_year_in_mi', years_and_months_days);\n}\n\n",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Supplier Quotation",
        "enabled": 0,
        "modified": "2024-12-27 12:17:13.130096",
        "module": "Mohan Impex",
        "name": "Brand Name for SQ",
        "script": "frappe.ui.form.on('Supplier Quotation Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Quotation",
        "enabled": 0,
        "modified": "2024-12-27 14:51:28.230139",
        "module": "Mohan Impex",
        "name": "Brand Name for Quotation",
        "script": "frappe.ui.form.on('Quotation', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n\n\n ",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Blanket Order",
        "enabled": 0,
        "modified": "2024-12-27 14:23:25.670324",
        "module": "Mohan Impex",
        "name": "Brand Name for Blanket Order",
        "script": "frappe.ui.form.on('Blanket Order Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Sales Invoice",
        "enabled": 0,
        "modified": "2024-12-27 14:48:27.768241",
        "module": "Mohan Impex",
        "name": "Brand Name for Sales Invoice",
        "script": "frappe.ui.form.on('Sales Invoice Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Sales Order",
        "enabled": 1,
        "modified": "2025-03-22 17:59:48.140340",
        "module": "Mohan Impex",
        "name": "Sales Order",
        "script": "frappe.ui.form.on(\"Sales Order\", {\n    refresh(frm) {\n    \tset_item_code_filter(frm)\n\t}\n})\n\nfrappe.ui.form.on('Sales Order Item', {\n\titem_code(frm, cdt, cdn){\n\t    let row = locals[cdt][cdn];\n\t    update_item_catagory_price(frm, row)\n\t},\n\titem_category(frm, cdt, cdn){\n\t    let row = locals[cdt][cdn]\n\t    update_item_catagory_price(frm, row)\n\t},\n\tonload(frm) {\n        if (frm.is_new()) {\n            set_session_employee(frm)\n        }\n    },\n    before_save(frm) {\n        set_session_employee(frm)\n    }\n})\n\ncur_frm.set_query(\"customer\", function (frm) {\n  var filter_dict = {\n    customer_level: cur_frm.doc.customer_level,\n  }\n  if (cur_frm.doc.custom_channel_partner){\n    filter_dict.custom_channel_partner = cur_frm.doc.custom_channel_partner\n  }\n  return {\n    filters: filter_dict,\n  };\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\nfunction set_session_employee(frm){\n  if(!frm.doc.created_by_emp){\n    frappe.call({\n      method: \"mohan_impex.mohan_impex.utils.get_session_employee\",\n      async:false,\n      callback: function (r) {\n        if (r.message) {\n          frm.set_value(\"created_by_emp\", r.message);\n          frm.refresh_field(\"created_by_emp\")\n        }\n      }\n    });\n  }\n}\n\nfunction update_item_catagory_price(frm, row) {\n    if (row.item_code && row.item_category && frm.doc.selling_price_list){\n        frappe.call({\n            method: \"mohan_impex.item_price.get_item_category_price\",\n            async: false,\n            args: {\n                \"item\" : row.item_code, \n                \"item_category\" : row.item_category, \n                \"price_list\" : frm.doc.selling_price_list\n            },\n            callback: function (r) {\n                let item_rate = r.message;\n                console.log(item_rate)\n                row.rate = item_rate\n                row.price_list_rate = item_rate\n                frm.refresh_field(\"items\")\n            }\n        });\n    }\n}",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Employee",
        "enabled": 1,
        "modified": "2025-03-21 10:31:39.738712",
        "module": "Mohan Impex",
        "name": "Employee",
        "script": "frappe.ui.form.on('Employee', {\n\trefresh(frm) {\n\t\tset_reports_to_filter(frm)\n\t},\n    role_profile(frm){\n        set_reports_to_filter(frm)\n    }\n})\n\nfunction set_reports_to_filter(frm){\n    if(frm.doc.role_profile){\n        frappe.call({\n            method: \"mohan_impex.mohan_impex.employee.get_reports_to_filter\",\n            async: false,\n            args: {\n                \"role\" : frm.doc.role_profile, \n            },\n            callback: function (r) {\n                frm.set_query('reports_to', ()=>{\n                    return {\n                        'filters': { role_profile: r.message }\n                    }\n                })\n            }\n        });\n    }\n}",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "User",
        "enabled": 1,
        "modified": "2025-01-25 13:01:13.873996",
        "module": "Mohan Impex",
        "name": "User",
        "script": "frappe.ui.form.on('User', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tbefore_save(frm){\n\t    if (!frm.is_new()){\n\t        set_emp_role_profile(frm)\n\t    }\n\t}\n})\n\nfunction set_emp_role_profile(frm){\n    if (frm.doc.role_profile_name){\n        frappe.call({\n            method: \"mohan_impex.mohan_impex.user.update_emp_role_profile\",\n            async: false,\n            args: {\n                \"user\" : frm.doc.name,\n                \"role_profile\": frm.doc.role_profile_name\n            }\n        })\n    }\n}",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Issue",
        "enabled": 1,
        "modified": "2025-01-29 11:07:26.856042",
        "module": "Mohan Impex",
        "name": "Issue",
        "script": "frappe.ui.form.on('Issue', {\n    onload(frm) {\n        if (frm.is_new()) {\n            set_session_employee(frm)\n        }\n    },\n    before_save(frm) {\n        set_session_employee(frm)\n    },\n})\n\nfunction set_session_employee(frm){\n  if(!frm.doc.created_by_emp){\n    frappe.call({\n      method: \"mohan_impex.mohan_impex.utils.get_session_employee\",\n      async:false,\n      callback: function (r) {\n        if (r.message) {\n          frm.set_value(\"created_by_emp\", r.message);\n          frm.refresh_field(\"created_by_emp\")\n        }\n      }\n    });\n  }\n}",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Customer",
        "enabled": 1,
        "modified": "2025-03-22 13:13:56.574024",
        "module": "Mohan Impex",
        "name": "Customer",
        "script": "frappe.ui.form.on('Customer', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tonload(frm) {\n        if (frm.is_new()) {\n            set_session_employee(frm)\n        }\n    },\n    before_save(frm) {\n        set_session_employee(frm)\n    },\n\tafter_workflow_action(frm){\n    if (frm.doc.workflow_state === \"KYC Completed\"){\n        frappe.call({\n            method: 'mohan_impex.mohan_impex.customer.update_kyc_status',\n            args: {\n                customer: frm.doc.name,\n                unv_customer: frm.doc.unv_customer\n            }\n        });\n    }\n  },\n})\n\nfunction set_session_employee(frm){\n  if(!frm.doc.created_by_emp){\n    frappe.call({\n      method: \"mohan_impex.mohan_impex.utils.get_session_employee\",\n      async:false,\n      callback: function (r) {\n        if (r.message) {\n          frm.set_value(\"created_by_emp\", r.message);\n          frm.refresh_field(\"created_by_emp\")\n        }\n      }\n    });\n  }\n}",
        "view": "Form"
    },
    {
        "docstatus": 0,
        "doctype": "Client Script",
        "dt": "Address",
        "enabled": 1,
        "modified": "2025-03-22 16:20:33.502215",
        "module": "Mohan Impex",
        "name": "Address",
        "script": "frappe.ui.form.on('Address', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tdistrict(frm){\n        frm.set_value(\"city\", frm.doc.district)\n\t},\n\tbefore_save(frm){\n\t    frm.set_value(\"city\", frm.doc.district)\n\t}\n})",
        "view": "Form"
    }
]