[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Blanket Order",
  "enabled": 1,
  "modified": "2025-09-07 15:25:33.038375",
  "module": "Mohan Impex",
  "name": "Blanket Order",
  "script": "frappe.ui.form.on(\"Blanket Order\", {\n    refresh(frm) {\n    \tset_item_code_filter(frm)\n\t}\n})\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.custom_item_template]\n            ]\n        };\n    };\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch",
  "enabled": 1,
  "modified": "2025-07-28 13:21:15.976912",
  "module": "Mohan Impex",
  "name": "Next Id For Batch",
  "script": "// frappe.ui.form.on('Batch', {\n//     onload: function(frm) {\n//         // Only fetch if it's a new doc and batch_id is empty\n//         if (frm.is_new() && !frm.doc.batch_id) {\n//             frappe.call({\n//                 method: 'mohan_impex.batch_api.get_next_batch_id',\n//                 args: {\n//                     item: frm.doc.item\n//                 },\n//                 callback: function(r) {\n//                     if (r.message && r.message.next_batch_id) {\n//                         frm.set_value('batch_id', r.message.next_batch_id);\n//                     }\n//                 }\n//             });\n//         }\n//     }\n// });\n\nfrappe.ui.form.on('Batch', {\n    item: function(frm) {\n        if (frm.is_new() && frm.doc.item && !frm.doc.batch_id) {\n            frappe.call({\n                method: 'mohan_impex.batch_api.get_next_batch_id',\n                args: {\n                    item: frm.doc.item\n                },\n                callback: function(r) {\n                    if (r.message && r.message.next_batch_id) {\n                        frm.set_value('batch_id', r.message.next_batch_id);\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "POS Invoice",
  "enabled": 1,
  "modified": "2025-04-06 11:19:38.322858",
  "module": "Mohan Impex",
  "name": "POS Invoice",
  "script": "frappe.ui.form.on('POS Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tonload(frm) {\n        if (!frm.is_new() || frm.doc.company) return;\n        frappe.db.get_list('Employee', {\n            filters: { user_id: frappe.session.user },\n            fields: ['company'],\n            limit: 1\n        }).then(r => {\n            if (r.length) frm.set_value('company', r[0].company);\n        });\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transport RFQ",
  "enabled": 1,
  "modified": "2025-05-26 17:52:29.915999",
  "module": "Mohan Impex",
  "name": "Transport RFQ Form",
  "script": "frappe.ui.form.on('Transport RFQ', {\n    onload: function(frm) {\n        frappe.call({\n            method: \"mohan_impex.user_roles.transporter_user\",\n            callback: function(r) {\n                if (r.message) {\n                    // Check if the row already exists\n                    let existing_rows = frm.doc.transporter_details.filter(row => row.transporter === r.message);\n\n                    if (existing_rows.length === 1 && frm.doc.transporter_details.length === 1) {\n                        // Don't touch the form if it's already set up properly\n                        return;\n                    }\n\n                    // Replace with only the matching row (or add it if missing)\n                    frm.clear_table(\"transporter_details\");\n\n                    let row = frm.add_child(\"transporter_details\");\n\n                    if (existing_rows.length) {\n                        Object.assign(row, existing_rows[0]); // copy data if already exists\n                    } else {\n                        row.transporter = r.message; // set if new\n                    }\n\n                    frm.refresh_field(\"transporter_details\");\n                }\n            }\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transport RFQ",
  "enabled": 1,
  "modified": "2025-06-28 12:25:30.234734",
  "module": null,
  "name": "Transport RFQ Amount",
  "script": "frappe.ui.form.on('Transporters', {\n    quoted_amount: calculate_actual_cost,\n    slab: calculate_actual_cost\n});\n\nfunction calculate_actual_cost(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    let total_weight = flt(frm.doc.total_weightin_kg) || 0;\n    let quoted = flt(row.quoted_amount);\n    let actual_cost = 0;\n\n    if (row.slab === \"Per KG\") {\n        actual_cost = quoted * total_weight;\n    } else if (row.slab === \"Per Ton\") {\n        actual_cost = (quoted * total_weight) / 1000;\n    } else if (row.slab === \"Total Frieght\") {\n        actual_cost = quoted;\n    }\n\n    frappe.model.set_value(cdt, cdn, 'actual_cost', actual_cost);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-09-07 15:26:53.530897",
  "module": "Mohan Impex",
  "name": "Rate Supplier Quotation Form",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n    onload: function(frm) {\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        // Only clear if it's a new doc AND user is unauthorized\n        if (!hasAccess && frm.is_new()) {\n            frm.doc.items.forEach(item => {\n                item.rate = 0;\n                item.amount = 0;\n            });\n            frm.refresh_field('items');\n        }\n    }\n});\n\n\nfrappe.ui.form.on(\"Supplier Quotation\", \"validate\", function(frm) {\n\tconst today = frappe.datetime.get_today();\n\n\tif (frm.doc.transaction_date < today) {\n\t\tfrappe.msgprint(__(\"Date cannot be in the past.\"));\n\t\tfrappe.validated = false;\n\t}\n\n\tif (frm.doc.valid_till && frm.doc.valid_till < today) {\n\t\tfrappe.msgprint(__(\"Valid Till Date cannot be in the past.\"));\n\t\tfrappe.validated = false;\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transport RFQ",
  "enabled": 1,
  "modified": "2025-04-04 14:02:48.964688",
  "module": "Mohan Impex",
  "name": "Transport RFQ List",
  "script": "frappe.call({\n    method: \"mohan_impex.user_roles.transporter_user\",\n    callback: function(response) {\n        if (response.message) {\n            frappe.set_route('List', 'Transport RFQ', 'List', {\n                'transporter': response.message\n            });\n        } \n    }\n});\n\nfrappe.listview_settings['Transport RFQ'] = {\n    onload: function(listview) {\n        frappe.call({\n            method: \"mohan_impex.user_roles.has_transporter_role\",\n            callback: function(response) {\n                if (response.message === true) {\n                    // Hide filters and buttons only for transporter role\n                    frappe.after_ajax(() => {\n                        $('.filter-selector').hide();\n                        $('.dropdown-menu').hide();\n                        $(\".menu-btn-group\").hide();\n                    });\n                    if (listview.page.fields_dict.pick_list)\n                    listview.page.fields_dict.pick_list.$wrapper.hide();\n                } \n            }\n        });\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-04-05 17:00:33.427489",
  "module": null,
  "name": "Request for Quotation List",
  "script": "frappe.call({\n    method: \"mohan_impex.user_roles.get_supplier_for_user\",\n    callback: function(response) {\n        if (response.message) {\n            frappe.set_route('List', 'Request for Quotation', 'List', {\n                'supplier': response.message\n            });\n        } \n    }\n});\n\nfrappe.listview_settings['Request for Quotation'] = {\n    onload: function(listview) {\n        frappe.call({\n            method: \"mohan_impex.user_roles.has_supplier_role\",\n            callback: function(response) {\n                if (response.message === true) {\n                    // Hide filters and buttons only for transporter role\n                    frappe.after_ajax(() => {\n                        $('.filter-selector').hide();\n                        $('.dropdown-menu').hide();\n                        $(\".menu-btn-group\").hide();\n                    });\n                    if (listview.page.fields_dict.pick_list)\n                    listview.page.fields_dict.pick_list.$wrapper.hide();\n                } \n            }\n        });\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Transfer",
  "enabled": 1,
  "modified": "2025-03-27 11:08:21.112390",
  "module": "Mohan Impex",
  "name": "Employee Transfer",
  "script": "frappe.ui.form.on('Employee Transfer', {\n\tbefore_save(frm) {\n\t\tif (frm.doc.docstatus === 0) {\n\t\t\tconst current_user = frappe.session.user_fullname;\n\t\t\tconst roles = frappe.user_roles[0];\n\n\t\t\tfrm.set_value('custom_current_user', current_user);\n\t\t\tfrm.set_value('custom_roles', roles);\n\t\t}\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Letter of Promotion and Increment",
  "enabled": 1,
  "modified": "2025-03-28 14:52:47.843622",
  "module": null,
  "name": "Letter of Promotion and Increment",
  "script": "frappe.ui.form.on('Letter of Promotion and Increment', {\n\tbefore_save(frm) {\n\t\t// your code here\n\t\tfrm.set_value('current_user',frappe.session.user_fullname)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Letter of Promotion",
  "enabled": 1,
  "modified": "2025-03-28 15:56:23.102212",
  "module": null,
  "name": "Letter of Promotion",
  "script": "frappe.ui.form.on('Letter of Promotion', {\n\tbefore_save(frm) {\n\t\t// your code here\n\t\tfrm.set_value('current_user',frappe.session.user_fullname)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-09-07 15:29:19.769611",
  "module": "Mohan Impex",
  "name": "Sales Invoice",
  "script": "frappe.ui.form.on(\"Sales Invoice\", {\n    custom_pod_attachment: function(frm) {\n        if (frm.doc.custom_pod_attachment) {\n            frm.set_value(\"custom_proof_of_delivery_status\", \"Uploaded\");\n        }\n        set_item_code_filter(frm)\n    },\n    refresh(frm){\n        set_item_code_filter(frm)\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-04-03 17:23:36.142271",
  "module": "Mohan Impex",
  "name": "Sales Flow",
  "script": "frappe.ui.form.on(\"Sales Order\", {\n    customer: function(frm) {\n        // Reset custom_outstanding_amount only\n        frm.set_value(\"custom_outstanding_amount\", 0);\n\n        if (frm.doc.company && frm.doc.customer) {\n            frappe.call({\n                method: \"erpnext.accounts.utils.get_balance_on\",\n                args: {\n                    party_type: \"Customer\",\n                    party: frm.doc.customer,\n                    company: frm.doc.company\n                },\n                callback: function(r) {\n                    if (!r.exc && r.message != null) {\n                        const balance = r.message;\n\n                        frm.set_value(\"custom_outstanding_amount\", balance);\n\n                        frm.refresh_field(\"custom_outstanding_amount\");\n                    }\n                }\n            });\n        }\n    },\n\n    refresh: function(frm) {\n        // No action needed since approval field is removed\n    },\n\n    before_save: function(frm) {\n        // Clean up any unwanted fields from child table\n        frm.doc.items.forEach(row => {\n            if (row.available_quantity && typeof row.available_quantity !== \"number\") {\n                row.available_quantity = 0;\n            }\n        });\n    }\n});\n\n// Update available quantity safely from backend response\nfrappe.ui.form.on('Sales Order Item', {\n    item_code: function(frm, cdt, cdn) {\n        update_available_quantity(frm, cdt, cdn);\n    },\n    warehouse: function(frm, cdt, cdn) {\n        update_available_quantity(frm, cdt, cdn);\n    }\n});\n\nfunction update_available_quantity(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    if (row.item_code && row.warehouse) {\n        frappe.call({\n            method: \"mohan_impex.Sales.available_stock.get_item_stock\",\n            args: {\n                item_code: row.item_code,\n                warehouse: row.warehouse\n            },\n            callback: function(r) {\n                if (r.message && typeof r.message === \"object\" && \"actual_qty\" in r.message) {\n                    frappe.model.set_value(cdt, cdn, \"available_quantity\", r.message.actual_qty);\n                } else {\n                    frappe.model.set_value(cdt, cdn, \"available_quantity\", 0);\n                }\n            }\n        });\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pick List",
  "enabled": 1,
  "modified": "2025-09-07 15:26:24.284678",
  "module": "Mohan Impex",
  "name": "Pick List 2",
  "script": "frappe.ui.form.on('Pick List', {\n    refresh: function(frm) {\n        if (!frm.doc.__islocal && frm.doc.docstatus === 1) {\n            frm.add_custom_button(__('Create Transport RFQ'), function() {\n                frappe.model.with_doctype('Transport RFQ', function() {\n                    let new_doc = frappe.model.get_new_doc('Transport RFQ');\n                    new_doc.pick_list = frm.doc.name;\n                    new_doc.from_location = frm.doc.parent_warehouse;\n                    new_doc.to_location = frm.doc.to_warehouse || '';\n                    new_doc.transport_date = frappe.datetime.now_date();\n\n                    let total_weight = 0;\n\n                    // Copy data from Pick List's locations table\n                    (frm.doc.locations || []).forEach((row) => {\n                        let child = frappe.model.add_child(new_doc, 'Transport RFQ Item', 'locations');\n                        child.item_code = row.item_code;\n                        child.qty = row.qty;\n                        child.uom = row.uom;\n                        child.weightin_kg = row.stock_qty;\n\n                        // Sum up the weights\n                        total_weight += flt(row.stock_qty);\n                    });\n\n                    // Set total_weightin_kg\n                    new_doc.total_weightin_kg = total_weight;\n\n                    frappe.set_route('Form', 'Transport RFQ', new_doc.name);\n                });\n            }, __('Create'));\n        }\n\n        set_item_code_filter(frm);\n    }\n});\n\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"locations\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\nfrappe.ui.form.on('Pick List', {\n    onload: function(frm) {\n        if (!frm.doc.custom_shipping_address && frm.doc.locations?.length > 0) {\n            const so_name = frm.doc.locations[0].sales_order;\n\n            if (so_name) {\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Sales Order',\n                        name: so_name\n                    },\n                    callback: function(r) {\n                        if (r.message && r.message.shipping_address) {\n                            const clean_address = stripHtmlAddress(r.message.shipping_address);\n                            frm.set_value('custom_shipping_address', clean_address);\n                        }\n                    }\n                });\n            }\n        }\n    }\n});\n\nfunction stripHtmlAddress(html) {\n    return html.replace(/<br\\s*\\/?>/gi, '\\n').trim();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "About Us Settings",
  "enabled": 1,
  "modified": "2024-11-20 12:53:41.448413",
  "module": null,
  "name": "Test",
  "script": "frappe.ui.form.on('About Us Settings', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work From Home",
  "enabled": 1,
  "modified": "2025-01-25 11:26:26.108625",
  "module": null,
  "name": "Work From Home Approval",
  "script": "// frappe.ui.form.on('Work From Home', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('Work From Home', {\n    status: function (frm) {\n        frm.set_df_property('work_update', 'read_only', frm.doc.status !== 'Approved');\n    },\n\n    refresh: function (frm) {\n        frm.set_df_property('work_update', 'read_only', frm.doc.status !== 'Approved');\n    }\n});\n\n ",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Dynamic OPtion",
  "enabled": 1,
  "modified": "2024-12-14 18:38:29.443024",
  "module": null,
  "name": "Option",
  "script": "frappe.ui.form.on('Dynamic OPtion', {\n    refresh: function(frm) {\n        // Dynamically set options for the \"Brand\" field\n        frm.set_df_property('brand', 'options', 'Option1\\nOption2');\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Allocation",
  "enabled": 1,
  "modified": "2024-12-16 15:01:51.409461",
  "module": null,
  "name": "Leave Allocation Deletion",
  "script": "frappe.listview_settings['Leave Allocation'] = {\n    onload: function(listview) {\n        // Override the default page size to show only 10 records\n        listview.page_length = 10;\n        listview.refresh();\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-12-23 11:46:30.351047",
  "module": null,
  "name": "Creditor Group",
  "script": "// frappe.ui.form.on('Supplier', {\n//     creditors_group: function (frm) {\n//         if (frm.doc.creditors_group) {\n//             // Fetch the Account Name for the selected Creditors Group\n//             frappe.call({\n//                 method: 'frappe.client.get_value',\n//                 args: {\n//                     doctype: 'Account',\n//                     fieldname: 'account_name',\n//                     filters: {\n//                         name: frm.doc.creditors_group\n//                     }\n//                 },\n//                 callback: function (response) {\n//                     if (response.message && response.message.account_name) {\n//                         // Set the Account Name in the Creditors Group field\n//                         frm.set_value('creditors_group', response.message.account_name);\n//                     }\n//                 }\n//             });\n//         }\n//     }\n// });\n\n\n// frappe.ui.form.on('Supplier', {\n//     creditors_group: function (frm) {\n//         if (frm.doc.creditors_group) {\n//             frappe.db.get_value('Account', frm.doc.creditors_group, 'account_name')\n//                 .then(r => {\n//                     if (r.message && r.message.account_name) {\n//                         frm.set_value('creditors_group', r.message.account_name);\n//                     }\n//                 });\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Group",
  "enabled": 1,
  "modified": "2024-12-21 18:38:45.128241",
  "module": null,
  "name": "All Supplier Groups",
  "script": "frappe.ui.form.on('Supplier Group', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_value('parent_supplier_group','All Supplier Groups');\n\t}\n})\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2024-12-24 11:20:40.004885",
  "module": null,
  "name": "Address Deletion",
  "script": "frappe.listview_settings['Address'] = {\n    onload: function(listview) {\n        // Override the default page size to show only 10 records\n        listview.page_length = 10;\n        listview.refresh();\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-12-25 21:25:12.015272",
  "module": null,
  "name": "link field increase",
  "script": "// frappe.ui.form.on('Customer', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n\nfrappe.ui.form.on(\"Customer\", {\n  setup(frm) {\n    frm.set_query(\"sm\", () => {\n      return { page_length: 100 };\n    });\n  },\n});\n\n\n// frappe.ui.form.on(\"Customer\", {\n//   setup(frm) {\n//     frm.set_query(\"sm\", () => {\n//       return {\n//         page_length: 32,\n//         filters: [\n//           [\"name\", \"like\", \"%sm%\"]\n//         ]\n//       };\n//     });\n//   },\n// });\n\nfrappe.ui.form.on(\"Customer\", {\n  setup(frm) {\n    frm.set_query(\"sm\", () => {\n      return {\n        page_length: 32,\n        fields: [\"sm\"], // Specify only the 'id' field to be returned\n      };\n    });\n  },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-12-30 19:30:22.792566",
  "module": "Mohan Impex",
  "name": "employee reset",
  "script": "frappe.ui.form.on('Employee', {\n    // Trigger on any field change\n    fieldname_change: function(frm) {\n        // Log the rephrase action (customize for your specific needs)\n        console.log('Field rephrased or updated.');\n\n        // Example: Perform an automatic save\n        frm.save()\n            .then(() => {\n                frappe.msgprint(__('Record saved automatically.'));\n            })\n            .catch(err => {\n                console.error('Error during auto-save:', err);\n            });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2024-12-31 17:45:41.192400",
  "module": "Mohan Impex",
  "name": "Item Group Filter",
  "script": "frappe.ui.form.on('Item', {\n    onload: function(frm) {\n        frm.set_query('item_group', function() {\n            return {\n                filters: {\n                    is_group: 0\n                }\n            };\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Assignment",
  "enabled": 1,
  "modified": "2025-01-16 13:46:38.188841",
  "module": "Mohan Impex",
  "name": "Shift Location for Work From Home",
  "script": "frappe.ui.form.on('Shift Assignment', {\n    refresh(frm) {\n        // Check the value of shift_type and toggle the visibility of shift_location\n        if (frm.doc.shift_type === \"Work From Home\") {\n            frm.set_df_property('shift_location', 'hidden', true);\n        } else {\n            frm.set_df_property('shift_location', 'hidden', false);\n        }\n    },\n    shift_type(frm) {\n        // Trigger visibility logic when shift_type is changed\n        if (frm.doc.shift_type === \"Work From Home\") {\n            frm.set_df_property('shift_location', 'hidden', true);\n        } else {\n            frm.set_df_property('shift_location', 'hidden', false);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-09-07 15:28:11.112468",
  "module": "Mohan Impex",
  "name": "BR:PI",
  "script": "frappe.ui.form.on(\"Purchase Invoice\", {\n    refresh(frm){\n        set_item_code_filter(frm)\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-01-24 15:39:57.338539",
  "module": "Mohan Impex",
  "name": "Lead Others",
  "script": "frappe.ui.form.on('Lead', {\n    refresh: function (frm) {\n        // Trigger on form refresh to handle field visibility\n        toggle_custom_specify_lead_type(frm);\n    },\n    custom_select_lead_type: function (frm) {\n        // Trigger when the value of custom_select_lead_type changes\n        toggle_custom_specify_lead_type(frm);\n    }\n});\n\n// Helper function to toggle the visibility of custom_specify_lead_type\nfunction toggle_custom_specify_lead_type(frm) {\n    if (frm.doc.custom_select_lead_type === \"Others\") {\n        frm.set_df_property('custom_specify_lead_type', 'hidden', 0); // Show the field\n    } else {\n        frm.set_df_property('custom_specify_lead_type', 'hidden', 1); // Hide the field\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-03-10 16:54:10.403338",
  "module": "Mohan Impex",
  "name": "sub_department_filter",
  "script": "frappe.ui.form.on('Employee', {\n    onload: function(frm) { \n        frm.trigger('set_department_query');\n        frm.trigger('set_sub_department_query');\n    },\n    \n    department: function(frm) {\n        frm.set_value(\"sub_department\", \"\"); // Reset sub_department when department changes\n        frm.trigger('set_sub_department_query');\n    },\n\n    set_department_query: function(frm) {\n        frm.set_query(\"department\", function() {\n            return {\n                filters: [\n                    [\"parent_department\", \"in\", [\"\", \"All Departments\"]], // Top-level departments\n                    [\"is_group\", \"=\", 1] // Ensure only main departments show\n                ]\n            };\n        });\n    },\n\n    set_sub_department_query: function(frm) {\n        if (!frm.doc.department) {\n            frm.set_query(\"sub_department\", function() {\n                return { filters: {} }; // Clear filter if no department is selected\n            });\n            return;\n        }\n\n        frm.set_query(\"sub_department\", function() {\n            return {\n                filters: {\n                    \"parent_department\": frm.doc.department // Show only sub-departments of selected main department\n                }\n            };\n        });\n    },\n\n    // sub_department: function(frm) {\n    //     if (!frm.doc.department) {\n    //         frappe.msgprint({\n    //             message: __('Please select a Department first.'),\n    //             indicator: 'red'\n    //         });\n    //         frm.set_value('sub_department', ''); // Clear the sub_department field\n    //         frm.trigger('set_sub_department_query'); // Reapply the filter\n    //     }\n    // }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-03-10 16:51:57.608054",
  "module": "Mohan Impex",
  "name": "company_shipping_address",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    onload: function(frm) {\n        apply_address_filter(frm);\n    },\n    company: function(frm) {\n        apply_address_filter(frm);\n    }\n});\n\nfunction apply_address_filter(frm) {\n    let filters = {\n        is_your_company_address: 1,\n        link_doctype: \"Company\"\n    };\n\n    let company_name = frm.doc.company ? frm.doc.company : \"empty\"; // Handle empty company case\n\n    if (frm.doc.company) {\n        filters[\"link_name\"] = frm.doc.company;\n    } else {\n        filters[\"link_name\"] = \"\"; // Ensures empty filter when no company is selected\n    }\n\n    frm.set_query(\"custom_company_shipping_address\", function() {\n        return {\n            filters: filters\n        };\n    });\n\n    // Display applied filter as a message in the form\n    let filter_message = `Filters applied for <b>Is Your Company Address</b> = Yes, <b>Link Doctype</b> = Company, <b>Link Name</b> = ${company_name}`;\n    \n    // Show message in a section break instead of a pop-up\n    frm.fields_dict['custom_filter_message']?.$wrapper.html(`<div style=\"padding: 10px; background-color: #f5f5f5; border-radius: 5px;\">${filter_message}</div>`);\n}\n\n// Ensure there's a section in the form to show the filter message\nfrappe.ui.form.on('Request for Quotation', {\n    setup: function(frm) {\n        frm.add_custom_button(__('Show Applied Filters'), function() {\n            apply_address_filter(frm);\n        }).css({'background-color': '#007bff', 'color': '#fff'});\n    }\n});\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-06-16 10:56:27.681421",
  "module": "Mohan Impex",
  "name": "Company_Address",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    custom_company_shipping_address: function (frm) {\n        if (frm.doc.custom_company_shipping_address) {\n            fetch_address_details(frm);\n        } else {\n            frm.set_value(\"custom_shipping_address_details\", \"\"); // Clear if address is not selected\n        }\n\n        set_item_code_filter(frm);\n    },\n\n    refresh: function (frm) {\n        set_item_code_filter(frm);\n    }\n});\n\n// Fetch shipping address details and set formatted address\nfunction fetch_address_details(frm) {\n    frappe.call({\n        method: \"frappe.client.get\",\n        args: {\n            doctype: \"Address\",\n            name: frm.doc.custom_company_shipping_address\n        },\n        callback: function (r) {\n            if (r.message) {\n                const addr = r.message;\n                const formatted_address = [\n                    addr.address_line1,\n                    addr.address_line2,\n                    addr.city,\n                    addr.state,\n                    addr.pincode,\n                    addr.country\n                ].filter(Boolean).join(\"\\n\"); // Remove empty lines and format\n\n                frm.set_value(\"custom_shipping_address_details\", formatted_address);\n            } else {\n                frm.set_value(\"custom_shipping_address_details\", \"\");\n            }\n        }\n    });\n}\n\n// Apply filter on item_code field in items table\nfunction set_item_code_filter(frm) {\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function (doc, cdt, cdn) {\n        const row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\nfrappe.ui.form.on(\"Request for Quotation\", \"validate\", function(frm) {\n\tconst today = frappe.datetime.get_today();\n\n\tif (frm.doc.transaction_date < today) {\n\t\tfrappe.msgprint(__(\"Date cannot be in the past.\"));\n\t\tfrappe.validated = false;\n\t}\n\n\tif (frm.doc.schedule_date && frm.doc.schedule_date < today) {\n\t\tfrappe.msgprint(__(\"Required Date cannot be in the past.\"));\n\t\tfrappe.validated = false;\n\t}\n\t\n\tif (frm.doc.custom_quotation_submission_deadline && frm.doc.custom_quotation_submission_deadline < today) {\n\t\t\tfrappe.msgprint(__(\"Quotation Submission Deadline cannot be in the past.\"));\n\t\t\tfrappe.validated = false;\n\t}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-02-01 18:32:15.876683",
  "module": "Mohan Impex",
  "name": "State and City",
  "script": "frappe.ui.form.on('Lead', {\n // whenever \"state\" field is changed\n state(frm) {\n     frm.set_query(\"city\", (doc) => {\n         return {\n             filters: {\n                 \"state\": doc.state // whatever state is selected\n             }\n         }\n     });\n }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-02-08 11:46:13.530715",
  "module": "Mohan Impex",
  "name": "Lead: Others Source",
  "script": "frappe.ui.form.on('Lead', {\n    refresh: function (frm) {\n        // Ensure correct field visibility on form refresh\n        toggle_custom_specify_source(frm);\n    },\n    source: function (frm) {\n        // Trigger when the 'source' field changes\n        toggle_custom_specify_source(frm);\n    }\n});\n\n// Helper function to toggle the visibility of custom_specify_source\nfunction toggle_custom_specify_source(frm) {\n    frm.set_df_property('custom_specify_source', 'hidden', frm.doc.source === \"Other\" ? 0 : 1);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-09-07 15:29:40.849483",
  "module": "Mohan Impex",
  "name": "SO: Company Address",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        frm.set_query(\"company_address\", function() {\n            return {\n                filters: {\n                    \"address_type\": \"Billing\",\n                    \"is_your_company_address\": 1\n                }\n            };\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-07-09 15:56:46.106064",
  "module": "Mohan Impex",
  "name": "Acceptance Status",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function (frm) {\n        // Define the roles that should have read-only access\n        let readOnlyRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        // Check if the user has any of the roles in the readOnlyRoles list\n        let isReadOnly = frappe.user_roles.some(role => readOnlyRoles.includes(role));\n\n        // Set the field property accordingly\n        frm.set_df_property('custom_acceptance_status', 'read_only', isReadOnly ? 1 : 0);\n    }\n});\n\nfrappe.ui.form.on('Purchase Order', {\n    onload(frm) {\n        // Only run if the document is not submitted\n        if (frm.doc.docstatus === 0) {\n            if (!frm.doc.custom_document || frm.doc.custom_document.length === 0) {\n                const default_docs = [\n                    \"Final docs / Surrender/Telex Notice\",\n                    \"Courier Tracking Details\",\n                    \"BOE Document\",\n                    \"BOE Duty Value\",\n                    \"FSSAI/ADC/Scan Certificates\",\n                    \"Out of Charge Certificate\",\n                    \"Shipment Order Copy\",\n                    \"Draft House BL\",\n                    \"Freight Certificate\",\n                    \"Vessel Tracking URL\"\n                ];\n\n                default_docs.forEach(doc => {\n                    let row = frm.add_child(\"custom_document\");\n                    row.documents = doc;  // make sure 'documents' is the fieldname in the child table\n                });\n\n                frm.refresh_field(\"custom_document\");\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-05-26 14:57:32.499340",
  "module": null,
  "name": "Supplier Rfq",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    onload: function (frm) {\n        const allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        const hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        const fieldsToToggle = [\n            'suppliers',\n            'message_for_supplier',\n            'email_template',\n            'send_attached_files',\n            'send_document_print'\n        ];\n\n        fieldsToToggle.forEach(field => {\n            frm.set_df_property(field, 'hidden', !hasAccess);\n        });\n    },\n\n    refresh: function (frm) {\n        const allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        const hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if (!hasAccess) {\n            // Wait for the menu DOM to be ready before hiding\n            frm.remove_custom_button(__('Send Emails to Suppliers'), __('Tools'));\n            frm.remove_custom_button(__('Download PDF'), __('Tools'));\n\n            \n\n            frappe.after_ajax(() => {\n                $('.menu-btn-group').hide();\n            });\n        }\n        if (frm.doc.custom_rfq_actual_status === 'Closed') {\n            frm.remove_custom_button(__('Supplier Quotation'), __('Create'));\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-04-18 13:29:56.566741",
  "module": null,
  "name": "Button Hide : SQ",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n    refresh(frm) {\n        // Wait a bit to ensure buttons are loaded\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if(!hasAccess){\n            setTimeout(() => {\n            frm.remove_custom_button(__('Purchase Order'), __('Create'));\n            frm.remove_custom_button(__('Quotation'), __('Create'));\n            frm.remove_custom_button(__('Material Request'), __('Get Items From'));\n            frm.remove_custom_button(__('Request for Quotation'), __('Get Items From'));\n            frm.remove_custom_button(__('Link to Material Requests'), __('Tools'));\n            $(\".menu-btn-group\").hide();\n        }, 500);\n        }\n        set_item_code_filter(frm)\n    }\n});\n\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Template test",
  "enabled": 1,
  "modified": "2025-03-13 10:59:40.204060",
  "module": "Mohan Impex",
  "name": "Item Template test",
  "script": "frappe.ui.form.on('Item Template Test', {\n    refresh: function(frm) {\n        // Filter item_template to show only items that have variants\n        frm.set_query(\"item_template\", function() {\n            return {\n                filters: {\n                    \"has_variants\": 1\n                }\n            };\n        });\n    },\n\n    item_template: function(frm) {\n        // Reset child table when template changes\n        frm.clear_table(\"items\");\n        frm.refresh_field(\"items\");\n    }\n});\n\n// Apply filtering inside child table dynamically\nfrappe.ui.form.on('Item Template Test Item', {\n    item_template: function(frm, cdt, cdn) {\n        var row = locals[cdt][cdn];\n\n        // Reset item_code when template changes\n        frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n\n        // Apply filter for item_code to show only variants of selected item_template\n        frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"variant_of\": row.item_template\n                }\n            };\n        };\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "GRN 2",
  "enabled": 1,
  "modified": "2025-03-20 15:26:07.119266",
  "module": "Mohan Impex",
  "name": "GRN 2 Documents",
  "script": "frappe.ui.form.on('GRN 2', {\n    refresh: function(frm) {\n        // Ensure rows are added only when creating a new document and the child table is empty\n        if (frm.is_new() && (!frm.doc.documents || frm.doc.documents.length === 0)) {\n            let default_documents = [];\n\n            if (frm.doc.type === \"Domestic\") {\n                default_documents = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"External Test Report\", \"Additional Documents\"];\n            } else if (frm.doc.type === \"Import\") {\n                default_documents = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"Halal Certificate (For Export)\", \"Kosher Certificate (For Export)\", \"External Test Report\", \"Additional Documents\"];\n            }\n\n            // Add rows based on the selected type\n            default_documents.forEach((doc_name) => {\n                let row = frm.add_child('documents');\n                row.document_name = doc_name;\n            });\n\n            frm.refresh_field('documents'); // Refresh the child table UI\n        }\n    }\n});\n\n\n\n// frappe.ui.form.on('GRN 2', {\n//     refresh: function(frm) {\n//         // Ensure rows are added only when creating a new document and the child table is empty\n//         if (frm.is_new() && (!frm.doc.documents || frm.doc.documents.length === 0)) {\n//             let default_documents = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"Halal Certificate (For Export)\", \"Kosher Certificate (For Export)\",\"External Test Report\",\"Additional Documents\"];\n            \n//             // Add 5 rows with predefined document_name values\n//             default_documents.forEach((doc_name) => {\n//                 let row = frm.add_child('documents');\n//                 row.document_name = doc_name;  // Assign different document names\n//             });\n\n//             frm.refresh_field('documents'); // Refresh the child table UI\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-03-22 12:26:56.917457",
  "module": null,
  "name": "HIde Filter:RFQ",
  "script": "frappe.listview_settings['Request for Quotation'] = {\n    onload: function(listview) {\n        \n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n        \n        if(!hasAccess){\n            frappe.after_ajax(() => {\n            $('.filter-selector').hide();\n            $('.dropdown-menu').hide();\n            $(\".menu-btn-group\").hide();\n        });\n        }\n        \n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "GRN 2",
  "enabled": 1,
  "modified": "2025-03-20 15:11:20.105996",
  "module": "Mohan Impex",
  "name": "Create GRN2 from PR",
  "script": "frappe.ui.form.on('GRN 2', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Purchase Receipt'), function() {\n            frappe.prompt([\n                {\n                    label: 'Purchase Receipt',\n                    fieldname: 'name',\n                    fieldtype: 'Link',\n                    options: 'Purchase Receipt',\n                    reqd: 1\n                }\n            ],\n            function(data) {\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Purchase Receipt',\n                        name: data.name  // Corrected field reference\n                    },\n                    freeze: true,\n                    freeze_message: __('Fetching details...'),\n                    callback: function(response) {\n                        if (response.exc) {\n                            return;\n                        }\n\n                        let pr = response.message;\n                        if (pr) {\n                            frm.set_value('purchase_receipt', pr.name);\n                            frm.set_value('type', pr.custom_type);\n                            if (pr.custom_invoice_no) {\n                                frm.set_value('invoice_no', pr.custom_invoice_no);\n                            }\n                            if (pr.custom_invoice_date) {\n                                frm.set_value('invoice_date', pr.custom_invoice_date);\n                            }\n                            \n                        }\n                    }\n                });\n            }, \n            __('Select Purchase Receipt'), \n            __('Add'));\n        }, __('Get Details From')).addClass('btn-primary'); // Add primary color styling\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "GRN 2",
  "enabled": 1,
  "modified": "2025-03-20 15:54:16.433374",
  "module": "Mohan Impex",
  "name": "Status Color GRN 2",
  "script": "frappe.listview_settings['GRN 2'] = {\n    add_fields: [\"type\"],  // Ensure field is available in list view\n    get_indicator: function(doc) {\n        if (doc.type === \"Domestic\") {\n            return [__(\"Domestic\"), \"green\", \"custom_type,=,Domestic\"];\n        } else if (doc.type === \"Import\") {\n            return [__(\"Import\"), \"yellow\", \"custom_type,=,Import\"];\n        }\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Landed Cost Voucher",
  "enabled": 1,
  "modified": "2025-06-16 11:24:23.180815",
  "module": null,
  "name": "Labour Cost: LCV",
  "script": "frappe.ui.form.on('Landed Cost Voucher', {\n    purchase_receipts_add: function(frm, cdt, cdn) {\n        update_labour_cost(frm);\n    },\n    purchase_receipts_remove: function(frm, cdt, cdn) {\n        update_labour_cost(frm);\n    },\n    refresh: function(frm) {\n        update_labour_cost(frm);\n    }\n});\n\nfunction update_labour_cost(frm) {\n    if (frm.doc.purchase_receipts && frm.doc.purchase_receipts.length > 0) {\n        let receipt_document_type = frm.doc.purchase_receipts[0].receipt_document_type;\n        let receipt_document = frm.doc.purchase_receipts[0].receipt_document;\n\n        // Ensure it is a Purchase Receipt\n        if (receipt_document_type === 'Purchase Receipt' && receipt_document) {\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Purchase Receipt\",\n                    filters: { name: receipt_document },\n                    fieldname: \"custom_total_labour_cost\"\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        let total_labour_cost = response.message.custom_total_labour_cost || 0;\n\n                        // Ensure at least one row exists in the Taxes and Charges table\n                        if (!frm.doc.taxes || frm.doc.taxes.length === 0) {\n                            let row = frm.add_child(\"taxes\");\n                            row.description = \"Labour Cost\";\n                            row.amount = total_labour_cost;\n                        } else {\n                            frm.doc.taxes[0].description = \"Labour Cost\";\n                            frm.doc.taxes[0].amount = total_labour_cost;\n                        }\n\n                        frm.refresh_field(\"taxes\");\n                        frappe.msgprint(__('Labour Cost updated from Purchase Receipt: ' + receipt_document));\n                    }\n                }\n            });\n        }\n    }\n}\n\nfrappe.ui.form.on(\"Landed Cost Voucher\", \"validate\", function(frm) {\n\tconst today = frappe.datetime.get_today();\n\n\tif (frm.doc.posting_date < today) {\n\t\tfrappe.msgprint(__(\"Posting Date cannot be in the past.\"));\n\t\tfrappe.validated = false;\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-09-07 15:28:57.079675",
  "module": "Mohan Impex",
  "name": "Hide Button :PO",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh(frm) {\n        // Wait a bit to ensure buttons are loaded\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if(!hasAccess){\n            setTimeout(() => {\n            frm.remove_custom_button('Update Items');\n            frm.remove_custom_button(__('Purchase Receipt'), __('Create'));\n            frm.remove_custom_button(__('Purchase Invoice'), __('Create'));\n            frm.remove_custom_button(__('Payment'), __('Create'));\n            frm.remove_custom_button(__('Payment Request'), __('Create'));\n            frm.remove_custom_button(__('Hold'), __('Status'));\n            frm.remove_custom_button(__('Close'), __('Status'))\n            $(\".menu-btn-group\").hide();\n        }, 500);\n        }\n        set_item_code_filter(frm)\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-08-19 15:05:30.725930",
  "module": "Mohan Impex",
  "name": "Hide Filter in  PO",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    onload: function(listview) {\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if (!hasAccess) {\n            frappe.after_ajax(() => {\n                // Hide full filter bar\n                $('.filter-selector').hide();\n\n                // Hide specific standard filters (if visible)\n                $(\".menu-btn-group\").hide();\n                if (listview.page.fields_dict.company)\n                    listview.page.fields_dict.company.$wrapper.hide();\n                if (listview.page.fields_dict.supplier)\n                    listview.page.fields_dict.supplier.$wrapper.hide();\n                if (listview.page.fields_dict.supplier_name)\n                    listview.page.fields_dict.supplier_name.$wrapper.hide();\n                if (listview.page.fields_dict.status)\n                    listview.page.fields_dict.status.$wrapper.hide();\n\n                // Hide Help Toggle\n                $('.dropdown-menu').hide();\n            });\n        }\n    }\n};\n\n\nfrappe.listview_settings[\"Purchase Order\"] = {\n    add_fields: [\"custom_asn_status\"],\n    get_indicator: function(doc) {\n        if (doc.custom_asn_status === \"ASN Initiation Required\") {\n            return [__(\"ASN Initiation Required\"), \"red\", \"custom_asn_status,=,ASN Initiation Required\"];\n        } else if (doc.custom_asn_status === \"Partial ASN Generated\") {\n            return [__(\"Partial ASN Generated\"), \"orange\", \"custom_asn_status,=,Partial ASN Generated\"];\n        } else if (doc.custom_asn_status === \"ASN Fully Processed\") {\n            return [__(\"ASN Fully Processed\"), \"green\", \"custom_asn_status,=,ASN Fully Processed\"];\n        }\n        return [__(doc.custom_asn_status || \"Unknown\"), \"gray\"];\n    }\n};\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-06-14 16:57:25.634021",
  "module": null,
  "name": "Hide Filter in SQ",
  "script": "frappe.listview_settings['Supplier Quotation'] = {\n    onload: function(listview) {\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if (!hasAccess) {\n            frappe.after_ajax(() => {\n                // Hide full filter bar\n                $('.filter-selector').hide();\n\n                // Hide specific standard filters (if visible)\n                $(\".menu-btn-group\").hide();\n                if (listview.page.fields_dict.company)\n                    listview.page.fields_dict.company.$wrapper.hide();\n                if (listview.page.fields_dict.supplier)\n                    listview.page.fields_dict.supplier.$wrapper.hide();\n                if (listview.page.fields_dict.title)\n                    listview.page.fields_dict.title.$wrapper.hide();\n                    \n                listview.page.wrapper.find('.btn-primary').hide();\n\n                $('.dropdown-menu').hide();\n            });\n        }\n    }\n};\n\nfrappe.call({\n    method: \"mohan_impex.user_roles.get_supplier_for_user\",\n    callback: function(response) {\n        if (response.message) {\n            frappe.set_route('List', 'Supplier Quotation', 'List', {\n                'supplier': response.message\n            });\n        } \n    }\n});\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2025-09-07 15:27:24.235585",
  "module": "Mohan Impex",
  "name": "Select Brand : M Req",
  "script": "ffrappe.ui.form.on(\"Material Request\", {\n    refresh(frm){\n        set_item_code_filter(frm)\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\nfrappe.ui.form.on(\"Material Request\", \"validate\", function(frm) {\n\tif (frm.doc.transaction_date < frappe.datetime.get_today()) {\n\t\tfrappe.msgprint(__(\"You cannot select a past date.\"));\n\t\tfrappe.validated = false;\n\t}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-09-07 15:30:01.134833",
  "module": "Mohan Impex",
  "name": "Item Supplier RFQ",
  "script": "frappe.ui.form.on(\"Request for Quotation\", {\n    refresh: function(frm) {\n        if(frm.doc.docstatus == 0){\n            frm.add_custom_button(\"Fetch Suppliers\", function() {\n            frm.trigger(\"set_suppliers_from_items\");\n        });\n        }\n    },\n\n    set_suppliers_from_items: function(frm) {\n        let items = frm.doc.items || [];\n\n        items.forEach(row => {\n            if (row.item_code) {\n                frappe.call({\n                    method: \"mohan_impex.supplier_item.get_suppliers_by_item\",\n                    args: { item_name: row.item_code },\n                    callback: function(response) {\n                        if (response.message && response.message.suppliers.length > 0) {\n                            let suppliers = response.message.suppliers;\n                            let existing_suppliers = frm.doc.suppliers.map(s => s.supplier);\n\n                            // Clean up the empty row if it exists\n                            if (frm.doc.suppliers.length === 1 && !frm.doc.suppliers[0].supplier) {\n                                frm.doc.suppliers = [];\n                            }\n\n                            suppliers.forEach(supplier => {\n                                if (!existing_suppliers.includes(supplier)) {\n                                    let child = frm.add_child(\"suppliers\");\n                                    child.supplier = supplier;\n                                }\n                            });\n\n                            frm.refresh_field(\"suppliers\");\n                        }\n                    }\n                });\n            }\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-08-14 12:42:38.302620",
  "module": "Mohan Impex",
  "name": "Unclick able",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n    onload(frm) {\n        // Only run if the document is not submitted\n        if (frm.doc.docstatus === 0) {\n            if (!frm.doc.custom_document || frm.doc.custom_document.length === 0) {\n                const default_docs = [\n                    \"Signed Contract\",\n                    \"Label Copy\",\n                    \"Cargo Picture\",\n                    \"Draft Documents\",\n                    \"ADVANCE PAYMENT\"\n                ];\n\n                default_docs.forEach(doc => {\n                    let row = frm.add_child(\"custom_document\");\n                    row.documents = doc;  // make sure 'documents' is the fieldname in the child table\n                });\n\n                frm.refresh_field(\"custom_document\");\n            }\n        }\n    }\n});\n\n\n\n\nfrappe.ui.form.on('Supplier Quotation', {\n    onload: function(frm) {\n        // Wait for field to render\n        setTimeout(() => {\n            // Disable link navigation\n            frm.fields_dict['supplier'].$wrapper.find('a').on('click', function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            });\n        }, 100);\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-12-27 18:06:25.392543",
  "module": "Mohan Impex",
  "name": "Total Number in MI",
  "script": "frappe.ui.form.on('Employee', {\n\trefresh(frm) {\n\t\t// Ensure that we set the value if the 'date_of_joining' is already set when the form lo\n\t},\n\tbefore_save(frm){\n\t    if (frm.doc.date_of_joining) {\n\t\t\tupdate_years_months_days(frm);\n\t\t}\n\t},\n\t// This will trigger whenever 'date_of_joining' field is changed\n\tdate_of_joining: function (frm) {\n\t\t// When the date_of_joining is changed, recalculate years, months, and days\n\t\tif (frm.doc.date_of_joining) {\n\t\t\tupdate_years_months_days(frm);\n\t\t}\n\t}\n});\nfunction update_years_months_days(frm) {\n\tconst joining_date = frm.doc.date_of_joining;\n\tconst current_date = frappe.datetime.nowdate();\n\t// Calculate the difference in days\n\tconst total_days_diff = frappe.datetime.get_diff(current_date, joining_date);\n\t// Calculate the number of full years\n\tconst years = Math.floor(total_days_diff / 365);\n\t// Calculate the remaining days after extracting years\n\tconst remaining_days_after_years = total_days_diff - years * 365;\n\t// Calculate the number of full months\n\tconst months = Math.floor(remaining_days_after_years / 30); // Approximate months (30 days p\n\t// Calculate the remaining days after extracting months\n\tconst remaining_days = remaining_days_after_years - months * 30; // Approximate remaining da\n\t// Format the result as \"X years Y months Z days\"\n\tlet years_and_months_days = `${years} years`;\n\tif (months > 0) {\n\t\tyears_and_months_days += ` ${months} months`;\n\t}\n\tif (remaining_days > 0) {\n\t\tyears_and_months_days += ` ${remaining_days} days`;\n\t}\n\t// Set the value in the custom field\n\tfrm.set_value('custom__total_number_of_year_in_mi', years_and_months_days);\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2025-04-18 13:56:40.438600",
  "module": "Mohan Impex",
  "name": "Brand Name for Quotation",
  "script": "frappe.ui.form.on(\"Quotation\", {\n    refresh(frm){\n        set_item_code_filter(frm)\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-03-22 17:59:48.140340",
  "module": "Mohan Impex",
  "name": "Sales Order",
  "script": "frappe.ui.form.on(\"Sales Order\", {\n    refresh(frm) {\n    \tset_item_code_filter(frm)\n\t}\n})\n\nfrappe.ui.form.on('Sales Order Item', {\n\titem_code(frm, cdt, cdn){\n\t    let row = locals[cdt][cdn];\n\t    update_item_catagory_price(frm, row)\n\t},\n\titem_category(frm, cdt, cdn){\n\t    let row = locals[cdt][cdn]\n\t    update_item_catagory_price(frm, row)\n\t},\n\tonload(frm) {\n        if (frm.is_new()) {\n            set_session_employee(frm)\n        }\n    },\n    before_save(frm) {\n        set_session_employee(frm)\n    }\n})\n\ncur_frm.set_query(\"customer\", function (frm) {\n  var filter_dict = {\n    customer_level: cur_frm.doc.customer_level,\n  }\n  if (cur_frm.doc.custom_channel_partner){\n    filter_dict.custom_channel_partner = cur_frm.doc.custom_channel_partner\n  }\n  return {\n    filters: filter_dict,\n  };\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\nfunction set_session_employee(frm){\n  if(!frm.doc.created_by_emp){\n    frappe.call({\n      method: \"mohan_impex.mohan_impex.utils.get_session_employee\",\n      async:false,\n      callback: function (r) {\n        if (r.message) {\n          frm.set_value(\"created_by_emp\", r.message);\n          frm.refresh_field(\"created_by_emp\")\n        }\n      }\n    });\n  }\n}\n\nfunction update_item_catagory_price(frm, row) {\n    if (row.item_code && row.item_category && frm.doc.selling_price_list){\n        frappe.call({\n            method: \"mohan_impex.item_price.get_item_category_price\",\n            async: false,\n            args: {\n                \"item\" : row.item_code, \n                \"item_category\" : row.item_category, \n                \"price_list\" : frm.doc.selling_price_list\n            },\n            callback: function (r) {\n                let item_rate = r.message;\n                console.log(item_rate)\n                row.rate = item_rate\n                row.price_list_rate = item_rate\n                frm.refresh_field(\"items\")\n            }\n        });\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-03-21 10:31:39.738712",
  "module": "Mohan Impex",
  "name": "Employee",
  "script": "frappe.ui.form.on('Employee', {\n\trefresh(frm) {\n\t\tset_reports_to_filter(frm)\n\t},\n    role_profile(frm){\n        set_reports_to_filter(frm)\n    }\n})\n\nfunction set_reports_to_filter(frm){\n    if(frm.doc.role_profile){\n        frappe.call({\n            method: \"mohan_impex.mohan_impex.employee.get_reports_to_filter\",\n            async: false,\n            args: {\n                \"role\" : frm.doc.role_profile, \n            },\n            callback: function (r) {\n                frm.set_query('reports_to', ()=>{\n                    return {\n                        'filters': { role_profile: r.message }\n                    }\n                })\n            }\n        });\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 1,
  "modified": "2025-01-25 13:01:13.873996",
  "module": "Mohan Impex",
  "name": "User",
  "script": "frappe.ui.form.on('User', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tbefore_save(frm){\n\t    if (!frm.is_new()){\n\t        set_emp_role_profile(frm)\n\t    }\n\t}\n})\n\nfunction set_emp_role_profile(frm){\n    if (frm.doc.role_profile_name){\n        frappe.call({\n            method: \"mohan_impex.mohan_impex.user.update_emp_role_profile\",\n            async: false,\n            args: {\n                \"user\" : frm.doc.name,\n                \"role_profile\": frm.doc.role_profile_name\n            }\n        })\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2025-03-29 21:43:38.812298",
  "module": "Mohan Impex",
  "name": "Issue",
  "script": "frappe.ui.form.on('Issue', {\n    onload(frm) {\n        if (frm.is_new()) {\n            set_session_employee(frm)\n        }\n    },\n    before_save(frm) {\n        set_session_employee(frm)\n    },\n    after_workflow_action(frm){\n        if (frm.doc.status === \"Resolved\"){\n          frappe.db.set_value(\"Issue\", frm.doc.name, 'resolved_date', frappe.datetime.nowdate())\n        }\n    },\n})\n\nfunction set_session_employee(frm){\n  if(!frm.doc.created_by_emp){\n    frappe.call({\n      method: \"mohan_impex.mohan_impex.utils.get_session_employee\",\n      async:false,\n      callback: function (r) {\n        if (r.message) {\n          frm.set_value(\"created_by_emp\", r.message);\n          frm.refresh_field(\"created_by_emp\")\n        }\n      }\n    });\n  }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-03-29 21:44:39.700736",
  "module": "Mohan Impex",
  "name": "Customer",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tonload(frm) {\n        if (frm.is_new()) {\n            set_session_employee(frm)\n        }\n    },\n    before_save(frm) {\n        set_session_employee(frm)\n    },\n\tafter_workflow_action(frm){\n    if (frm.doc.workflow_state === \"KYC Completed\"){\n        frappe.call({\n            method: 'mohan_impex.mohan_impex.customer.update_kyc_status',\n            args: {\n                customer: frm.doc.name,\n                unv_customer: frm.doc.unv_customer\n            }\n        });\n        frappe.db.set_value(\"Customer\", frm.doc.name, 'kyc_complete_date', frappe.datetime.nowdate())\n    }\n  },\n})\n\nfunction set_session_employee(frm){\n  if(!frm.doc.created_by_emp){\n    frappe.call({\n      method: \"mohan_impex.mohan_impex.utils.get_session_employee\",\n      async:false,\n      callback: function (r) {\n        if (r.message) {\n          frm.set_value(\"created_by_emp\", r.message);\n          frm.refresh_field(\"created_by_emp\")\n        }\n      }\n    });\n  }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-03-22 16:20:33.502215",
  "module": "Mohan Impex",
  "name": "Address",
  "script": "frappe.ui.form.on('Address', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tdistrict(frm){\n        frm.set_value(\"city\", frm.doc.district)\n\t},\n\tbefore_save(frm){\n\t    frm.set_value(\"city\", frm.doc.district)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-09-07 15:27:49.645239",
  "module": "Mohan Impex",
  "name": "Delivery Note",
  "script": "frappe.ui.form.on(\"Delivery Note\", {\n    refresh(frm) {\n        set_item_code_filter(frm);\n    },\n});\n\nfunction set_item_code_filter(frm) {\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-05-14 18:18:16.743351",
  "module": "Mohan Impex",
  "name": "Purchase Receipt Type Color",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    add_fields: [\"custom_type\"],  // Ensure field is available in list view\n    get_indicator: function(doc) {\n        if (doc.custom_type === \"Domestic\") {\n            return [__(\"Domestic\"), \"green\", \"custom_type,=,Domestic\"];\n        } else if (doc.custom_type === \"Import\") {\n            return [__(\"Import\"), \"yellow\", \"custom_type,=,Import\"];\n        }\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Advance Supplier Notification",
  "enabled": 1,
  "modified": "2025-09-07 15:22:17.068951",
  "module": "Mohan Impex",
  "name": "Advance Supplier Notification",
  "script": "// ===== Parent: Advance Supplier Notification =====\nfrappe.ui.form.on('Advance Supplier Notification', {\n    // Keep total_qty always correct in UI\n    refresh(frm) { recompute_total_qty(frm); },\n    items_add(frm) { recompute_total_qty(frm); },\n    items_remove(frm) { recompute_total_qty(frm); },\n\n    validate(frm) {\n        recompute_total_qty(frm);\n\n        const today = frappe.datetime.get_today();\n        if (frm.doc.invoice_date && frm.doc.invoice_date < today) {\n            frappe.msgprint(__(\"Invoice Date cannot be in the past.\"));\n            frm.validated = false;\n        }\n    },\n\n    before_save(frm) {\n        recompute_total_qty(frm);\n    },\n\n    // ✅ Run updates only when ASN is submitted\n    on_submit: async function (frm) {\n        try {\n            if (!frm.doc.purchase_order) return;\n\n            // 1) Compute cumulative total ASN qty across ALL ASNs for this PO\n            const asn_list = await frappe.db.get_list('Advance Supplier Notification', {\n                filters: { purchase_order: frm.doc.purchase_order },\n                fields: ['name'],\n                limit: 5000\n            });\n\n            let cumulative_total_qtyasn = 0;\n            for (const a of asn_list) {\n                const asn_doc = await frappe.db.get_doc('Advance Supplier Notification', a.name);\n                (asn_doc.items || []).forEach(row => {\n                    cumulative_total_qtyasn += (row.qty || 0);\n                });\n            }\n\n            // 2) Fetch the PO and cap header cumulative at ordered total\n            const po = await frappe.db.get_doc('Purchase Order', frm.doc.purchase_order);\n            const ordered_total_qty = (po.items || []).reduce((s, it) => s + (it.qty || 0), 0);\n            const capped_total_qtyasn = Math.min(cumulative_total_qtyasn, ordered_total_qty);\n\n            // 3) Map THIS ASN's items to add line-wise\n            const qty_by_item_from_this_asn = {};\n            (frm.doc.items || []).forEach(row => {\n                const code = row.item;     // ASN child field: item\n                const qty  = row.qty || 0; // integers in your setup\n                if (!code) return;\n                qty_by_item_from_this_asn[code] = (qty_by_item_from_this_asn[code] || 0) + qty;\n            });\n\n            // 4) Update PO child rows: add this ASN qty to existing custom_asn_qty\n            (po.items || []).forEach(it => {\n                const code = it.item_code; // PO child field: item_code\n                if (qty_by_item_from_this_asn[code]) {\n                    it.custom_asn_qty = (it.custom_asn_qty || 0) + qty_by_item_from_this_asn[code];\n\n                    // OPTIONAL per-line cap (enable if desired):\n                    // it.custom_asn_qty = Math.min(it.custom_asn_qty, it.qty || 0);\n                }\n            });\n\n            // 5) Update PO header fields (single save) — NOTE: no status field updates\n            po.custom_asn_no                   = frm.doc.name;\n            po.custom_purchase_invoice         = frm.doc.purchase_invoice;\n            po.custom_invoice_date             = frm.doc.invoice_date;\n            po.custom_transporter_name         = frm.doc.transporter_name;\n            po.custom_vehiclecontainer_number  = frm.doc.vehiclecontainer_number;\n            po.custom_expected_arrival_date_   = frm.doc.expected_arrival_date;\n            po.custom_driver_name              = frm.doc.driver_name;\n            po.custom_driver_mobile_number     = frm.doc.driver_mobile_number;\n            po.custom_total_qtyasn             = capped_total_qtyasn; // capped cumulative header\n\n            await frappe.call({\n                method: 'frappe.client.save',\n                args: { doc: po }\n            });\n\n            frappe.msgprint(__(`PO ${frm.doc.purchase_order} updated — ASN Created (${capped_total_qtyasn}/${ordered_total_qty}).`));\n        } catch (e) {\n            console.error(e);\n            frappe.msgprint({\n                title: __(\"Error\"),\n                message: __(\"Failed to update Purchase Order from ASN on submit\"),\n                indicator: \"red\"\n            });\n        }\n    }\n});\n\n// ===== Child: Advance Supplier Notification Item =====\nfrappe.ui.form.on('Advance Supplier Notification Item', {\n    qty(frm, cdt, cdn) {\n        recompute_total_qty(frm);\n    }\n});\n\n// ===== Helper =====\nfunction recompute_total_qty(frm) {\n    let sum = 0;\n    (frm.doc.items || []).forEach(r => { sum += (r.qty || 0); });\n    if ((frm.doc.total_qty || 0) !== sum) {\n        frm.set_value('total_qty', sum);\n    }\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transport RFQ",
  "enabled": 1,
  "modified": "2025-05-26 19:09:55.858191",
  "module": null,
  "name": "Transport RFQ1",
  "script": "frappe.ui.form.on('Transporter Details', {\n    transporter: function(frm, cdt, cdn) {\n        // Clear driver field when transporter changes\n        frappe.model.set_value(cdt, cdn, 'driver', '');\n\n        const row = locals[cdt][cdn];\n\n        // Call API to get transporter → drivers map\n        frappe.call({\n            method: \"mohan_impex.transporter.get_supplier_driver_map\",\n            callback: function(r) {\n                if (r.message) {\n                    const driver_map = r.message;\n                    const driver_list = driver_map[row.transporter] || [];\n\n                    // Set filtered options for driver field\n                    frappe.meta.get_docfield(\"Transporter Details\", \"driver\", frm.doc.name).options = \n                        driver_list.map(d => d.name);  // setting internal 'name' values\n\n                    // Optional: update link display field to show full_name\n                    frm.fields_dict.transporter_details.grid.update_docfield_property(\n                        \"driver\",\n                        \"get_query\",\n                        () => ({\n                            filters: {\n                                name: [\"in\", driver_list.map(d => d.name)]\n                            }\n                        })\n                    );\n\n                    frm.fields_dict.transporter_details.grid.refresh();\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-05-27 12:42:05.969441",
  "module": null,
  "name": "Sales Invoice1",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    onload: function(frm) {\n        // Avoid adding transport charges multiple times\n        const already_added = frm.doc.taxes.some(tax => tax.description === \"Transporter Charges\");\n        if (already_added) return;\n\n        // Get unique Delivery Notes from items table\n        const delivery_notes = [\n            ...new Set(\n                (frm.doc.items || [])\n                    .map(item => item.delivery_note)\n                    .filter(dn => dn)\n            )\n        ];\n\n        if (delivery_notes.length === 0) return;\n\n        // Now fetch each DN and total transport charges\n        let total_transport = 0;\n        let processed = 0;\n\n        delivery_notes.forEach(dn => {\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Delivery Note\",\n                    name: dn\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        let transport = r.message.custom_transport_charges || 0;\n                        total_transport += transport;\n                    }\n\n                    processed++;\n                    if (processed === delivery_notes.length && total_transport > 0) {\n                        let row = frm.add_child(\"taxes\");\n                        row.charge_type = \"Actual\";\n                        row.account_head = \"Sales Expenses - MISL\"; // Adjust this\n                        row.description = \"Transporter Charges\";\n                        row.tax_amount = total_transport;\n                        row.cost_center = \"Main - MISL\"; // Adjust this too\n                        frm.refresh_field(\"taxes\");\n                    }\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Task",
  "enabled": 1,
  "modified": "2025-08-20 12:37:47.064790",
  "module": "Mohan Impex",
  "name": "WFH Attendance",
  "script": "frappe.ui.form.on('Task', {\n    after_save: function(frm) {\n        if (frm.doc.report_status === 'Approved') {\n            if (frm.doc.employee && frm.doc.date) {\n                frappe.call({\n                    method: \"frappe.client.insert\",\n                    args: {\n                        doc: {\n                            doctype: \"Attendance\",\n                            employee: frm.doc.employee,\n                            attendance_date: frm.doc.date,\n                            status: \"Present\",\n                            // shift: \"WFH\"\n                        }\n                    },\n                    callback: function(r) {\n                        if (!r.exc) {\n                            frappe.msgprint(__('Attendance created: ' + r.message.name));\n                        }\n                    }\n                });\n            } else {\n                frappe.msgprint(__('Employee or Date is missing.'));\n            }\n\n        } else if (frm.doc.report_status === 'Rejected') {\n            if (frm.doc.employee && frm.doc.date) {\n                frappe.call({\n                    method: \"frappe.client.insert\",\n                    args: {\n                        doc: {\n                            doctype: \"Leave Application\",\n                            employee: frm.doc.employee,\n                            from_date: frm.doc.date,\n                            to_date: frm.doc.date,\n                            leave_type: \"Casual Leave\",  // adjust as needed\n                            description:\"Work From Home Report is Rejected\",\n                            status: \"Open\"\n                        }\n                    },\n                    callback: function(r) {\n                        if (!r.exc) {\n                            frappe.msgprint(__('Leave Application created: ' + r.message.name));\n                        }\n                    }\n                });\n            } else {\n                frappe.msgprint(__('Employee or Date is missing.'));\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2025-07-04 12:27:42.594149",
  "module": "Mohan Impex",
  "name": "Work Order",
  "script": "// Handle BOM-loaded or updated Work Order items\nfrappe.ui.form.on('Work Order', {\n    onload_post_render: function(frm) {\n        frappe.after_ajax(() => {\n            (frm.doc.required_items || []).forEach(row => {\n                if (row.item_code && !row.source_warehouse) {\n                    frappe.model.set_value(row.doctype, row.name, 'source_warehouse', 'DNK PLANT - MISL');\n                }\n            });\n        });\n    },\n    refresh: function(frm) {\n        (frm.doc.required_items || []).forEach(row => {\n            if (row.item_code && !row.source_warehouse) {\n                frappe.model.set_value(row.doctype, row.name, 'source_warehouse', 'DNK PLANT - MISL');\n            }\n        });\n    }\n});\n\n// Handle when user manually changes item_code\nfrappe.ui.form.on('Work Order Item', {\n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.item_code && !row.source_warehouse) {\n            frappe.model.set_value(cdt, cdn, 'source_warehouse', 'DNK PLANT - MISL');\n        }\n    }\n});\n\n\n\n// frappe.ui.form.on('Work Order', {\n//     onload_post_render: function(frm) {\n//         frappe.after_ajax(() => {\n//             (frm.doc.required_items || []).forEach(row => {\n//                 if (!row.source_warehouse) {\n//                     frappe.model.set_value(row.doctype, row.name, 'source_warehouse', 'DNK PLANT - MISL');\n//                 }\n//             });\n//         });\n//     },\n//     refresh: function(frm) {\n//         (frm.doc.required_items || []).forEach(row => {\n//             if (!row.source_warehouse) {\n//                 frappe.model.set_value(row.doctype, row.name, 'source_warehouse', 'DNK PLANT - MISL');\n//             }\n//         });\n//     }\n// });\n\n// // Apply when user manually selects item_code\n// frappe.ui.form.on('Work Order Item', {\n//     item_code: function(frm, cdt, cdn) {\n//         let row = locals[cdt][cdn];\n//         if (!row.source_warehouse) {\n//             frappe.model.set_value(cdt, cdn, 'source_warehouse', 'DNK PLANT - MISL');\n//         }\n//     }\n// });\n\n\n\n\n\n\n\n\n\n\n\n\n\n// frappe.ui.form.on('Work Order Item', {\n//     item_code: function(frm, cdt, cdn) {\n//         let row = locals[cdt][cdn];\n//         if (!row.source_warehouse) {\n//             frappe.model.set_value(cdt, cdn, 'source_warehouse', 'DNK PLANT - MISL');\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Card",
  "enabled": 1,
  "modified": "2025-07-04 13:38:32.843680",
  "module": "Mohan Impex",
  "name": "Job Card",
  "script": "frappe.ui.form.on('Job Card', {\n    custom_employee_group: function(frm) {\n        if (!frm.doc.custom_employee_group) return;\n\n        // Step 1: Get Employee Template\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Employee Template',\n                name: frm.doc.custom_employee_group\n            },\n            callback: function(r) {\n                const log_names = r.message.assign_employee || [];\n\n                frm.clear_table('employee');\n\n                // Step 2: Loop through Job Card Time Log names\n                let pending = log_names.length;\n\n                if (pending === 0) {\n                    frm.refresh_field('employee');\n                }\n\n                log_names.forEach(log_name => {\n                    frappe.call({\n                        method: 'frappe.client.get',\n                        args: {\n                            doctype: 'Job Card Time Log',\n                            name: log_name\n                        },\n                        callback: function(res) {\n                            const emp_id = res.message?.employee;\n                            if (emp_id) {\n                                const row = frm.add_child('employee');\n                                row.employee = emp_id;\n                            }\n\n                            pending--;\n\n                            if (pending === 0) {\n                                frm.refresh_field('employee');\n                            }\n                        },\n                        error: function(err) {\n                            console.error('Fetch failed:', err);\n                            pending--;\n                        }\n                    });\n                });\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-07-07 19:31:00.731812",
  "module": "Mohan Impex",
  "name": "Stock Entry",
  "script": "frappe.ui.form.on('Stock Entry', {\n\trefresh(frm) {\n\t    add_custom_button(frm, frm.doc.product_inspection_required, \"Product Inspection(s)\", \"Product\")\n\t    add_custom_button(frm, frm.doc.application_inspection_required, \"Application Inspection(s)\", \"Application\")\n\t},\n\tonload(frm){\n\t  set_testing_required(frm)\n\t},\n\tbom_no(frm){\n\t  set_testing_required(frm)\n\t},\n\tstock_entry_type(frm){\n\t  set_testing_required(frm)  \n\t}\n})\n\n\nfunction add_custom_button(frm, check_field, button_name, scope){\n    if (check_field){\n        frm.add_custom_button(\n    \t\t__(button_name),\n    \t\t() => {\n    \t\t\tlet transaction_controller = make_quality_inspection(frm, scope)\n    \t\t},\n    \t\t__(\"Create\")\n    \t);\n    \tfrm.page.set_inner_btn_group_as_primary(__(\"Create\"));\n    }\n    else{\n        frm.remove_custom_button(button_name, \"Create\");\n    }\n}\nasync function set_testing_required(frm){\n    if(frm.is_new()){\n        var inspection_required = \"\"\n        var product_inspection_required = \"\"\n        var application_inspection_required = \"\"\n        if([\"Manufacture\", \"Material Transfer for Manufacture\"].includes(frm.doc.stock_entry_type)){\n            await frappe.db.get_value('BOM', frm.doc.bom_no, [\"inspection_required\", \"product_inspection_required\", \"application_inspection_required\"])\n            .then(r => {\n                const value = r.message\n                if(frm.doc.stock_entry_type === \"Material Transfer for Manufacture\"){\n                    inspection_required = value.inspection_required\n                }\n                else if (frm.doc.stock_entry_type === \"Manufacture\"){\n                    product_inspection_required = value.product_inspection_required\n                    application_inspection_required = value.application_inspection_required\n                }\n            })\n        }\n        frm.set_value(\"inspection_required\", inspection_required)\n        frm.set_value(\"product_inspection_required\", product_inspection_required)\n        frm.set_value(\"application_inspection_required\", application_inspection_required)\n\t}\n}\n\nfunction make_quality_inspection(frm, scope) {\n\tlet data = [];\n\tconst fields = [\n\t\t{\n\t\t\tlabel: \"Items\",\n\t\t\tfieldtype: \"Table\",\n\t\t\tfieldname: \"items\",\n\t\t\tcannot_add_rows: true,\n\t\t\tin_place_edit: true,\n\t\t\tdata: data,\n\t\t\tget_data: () => {\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Data\",\n\t\t\t\t\tfieldname: \"docname\",\n\t\t\t\t\thidden: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Read Only\",\n\t\t\t\t\tfieldname: \"item_code\",\n\t\t\t\t\tlabel: __(\"Item Code\"),\n\t\t\t\t\tin_list_view: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Read Only\",\n\t\t\t\t\tfieldname: \"item_name\",\n\t\t\t\t\tlabel: __(\"Item Name\"),\n\t\t\t\t\tin_list_view: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Float\",\n\t\t\t\t\tfieldname: \"qty\",\n\t\t\t\t\tlabel: __(\"Accepted Quantity\"),\n\t\t\t\t\tin_list_view: true,\n\t\t\t\t\tread_only: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Float\",\n\t\t\t\t\tfieldname: \"sample_size\",\n\t\t\t\t\tlabel: __(\"Sample Size\"),\n\t\t\t\t\treqd: true,\n\t\t\t\t\tin_list_view: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Data\",\n\t\t\t\t\tfieldname: \"description\",\n\t\t\t\t\tlabel: __(\"Description\"),\n\t\t\t\t\thidden: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Data\",\n\t\t\t\t\tfieldname: \"serial_no\",\n\t\t\t\t\tlabel: __(\"Serial No\"),\n\t\t\t\t\thidden: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Data\",\n\t\t\t\t\tfieldname: \"batch_no\",\n\t\t\t\t\tlabel: __(\"Batch No\"),\n\t\t\t\t\thidden: true\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfieldtype: \"Data\",\n\t\t\t\t\tfieldname: \"child_row_reference\",\n\t\t\t\t\tlabel: __(\"Child Row Reference\"),\n\t\t\t\t\thidden: true\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t];\n\n// \tconst me = this;\n\tconst dialog = new frappe.ui.Dialog({\n\t\ttitle: __(`Select Items for ${scope} Inspection`),\n\t\tsize: \"extra-large\",\n\t\tfields: fields,\n\t\tprimary_action: function () {\n\t\t\tconst data = dialog.get_values();\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"mohan_impex.mohan_impex.stock_entry.make_quality_inspections\",\n\t\t\t\targs: {\n\t\t\t\t\tdoctype: frm.doc.doctype,\n\t\t\t\t\tdocname: frm.doc.name,\n\t\t\t\t\titems: data.items,\n\t\t\t\t\tscope: scope\n\t\t\t\t},\n\t\t\t\tfreeze: true,\n\t\t\t\tcallback: function (r) {\n\t\t\t\t\tif (r.message.length > 0) {\n\t\t\t\t\t\tif (r.message.length === 1) {\n\t\t\t\t\t\t\tfrappe.set_route(\"Form\", \"Quality Inspection\", r.message[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfrappe.route_options = {\n\t\t\t\t\t\t\t\t\"reference_type\": frm.doc.doctype,\n\t\t\t\t\t\t\t\t\"reference_name\": frm.doc.name\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfrappe.set_route(\"List\", \"Quality Inspection\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdialog.hide();\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tprimary_action_label: __(\"Create\")\n\t});\n    console.log(frm.doc.items)\n\tfrappe.call({\n\t\tmethod: \"mohan_impex.mohan_impex.stock_entry.check_item_quality_inspection\",\n\t\targs: {\n\t\t\tdoctype: frm.doc.doctype,\n\t\t\titems: frm.doc.items,\n\t\t\tinspection_scope: scope\n\t\t},\n\t\tfreeze: true,\n\t\tcallback: function (r) {\n\t\t    console.log(r.message)\n\t\t\tr.message.forEach(item => {\n\t\t\t\tif (has_inspection_required(frm, item, scope)) {\n\t\t\t\t\tlet dialog_items = dialog.fields_dict.items;\n\t\t\t\t\tdialog_items.df.data.push({\n\t\t\t\t\t\t\"item_code\": item.item_code,\n\t\t\t\t\t\t\"item_name\": item.item_name,\n\t\t\t\t\t\t\"qty\": item.qty,\n\t\t\t\t\t\t\"description\": item.description,\n\t\t\t\t\t\t\"serial_no\": item.serial_no,\n\t\t\t\t\t\t\"batch_no\": item.batch_no,\n\t\t\t\t\t\t\"sample_size\": item.sample_quantity,\n\t\t\t\t\t\t\"child_row_reference\": item.name,\n\t\t\t\t\t});\n\t\t\t\t\tdialog_items.grid.refresh();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdata = dialog.fields_dict.items.df.data;\n\t\t\tif (!data.length) {\n\t\t\t\tfrappe.msgprint(__(\"All items in this document already have a linked Quality Inspection.\"));\n\t\t\t} else {\n\t\t\t\tdialog.show();\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction has_inspection_required(frm, item, scope) {\n    let inspection_value = item.quality_inspection\n    if (scope === \"Product\"){\n        inspection_value = item.product_inspection\n    }\n    else if (scope === \"Application\"){\n        inspection_value = item.application_inspection\n    }\n    console.log(scope)\n\tif (frm.doc.doctype === \"Stock Entry\" && frm.doc.purpose == \"Manufacture\" ) {\n\t\tif (item.is_finished_item && !item.quality_inspection) {\n\t\t\treturn true;\n\t\t}\n\t} else if (!inspection_value) {\n\t\treturn true;\n\t}\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2025-07-10 17:33:34.616335",
  "module": "Mohan Impex",
  "name": "PAYMENT / RECEIPT ENTRY",
  "script": "frappe.ui.form.on('Payment Entry', {\n    party_type: function(frm) {\n        frm.set_value('custom_supplier_type', '');\n        frm.set_df_property('custom_import_document', 'hidden', 1);\n        frm.clear_table('custom_import_document');\n        frm.refresh_field('custom_import_document');\n    },\n\n    party: function(frm) {\n        if (frm.doc.party_type === \"Supplier\" && frm.doc.party) {\n            frappe.db.get_value('Supplier', frm.doc.party, 'supplier_type')\n                .then(r => {\n                    if (r && r.message && r.message.supplier_type) {\n                        const supplier_type = r.message.supplier_type;\n                        frm.set_value('custom_supplier_type', supplier_type);\n\n                        const is_import = supplier_type === 'Import';\n                        frm.set_df_property('custom_import_document', 'hidden', !is_import);\n\n                        frm.clear_table('custom_import_document');\n\n                        if (is_import) {\n                            const rows = [\n                                'Remittance Copy',\n                                'Final Payment',\n                                'Advance Payment / DA / DP / LC'\n                            ];\n\n                            rows.forEach(text => {\n                                let row = frm.add_child('custom_import_document');\n                                row.documents = text; // <- this is your field\n                            });\n\n                            frm.refresh_field('custom_import_document');\n                        } else {\n                            frm.refresh_field('custom_import_document');\n                        }\n                    } else {\n                        frm.set_value('custom_supplier_type', '');\n                        frm.set_df_property('custom_import_document', 'hidden', 1);\n                        frm.clear_table('custom_import_document');\n                        frm.refresh_field('custom_import_document');\n                    }\n                });\n        } else {\n            frm.set_value('custom_supplier_type', '');\n            frm.set_df_property('custom_import_document', 'hidden', 1);\n            frm.clear_table('custom_import_document');\n            frm.refresh_field('custom_import_document');\n        }\n    }\n});\n\n// frappe.ui.form.on('Payment Entry', {\n//     party_type: function(frm) {\n//         frm.set_value('custom_supplier_type', '');\n//     },\n//     party: function(frm) {\n//         if (frm.doc.party_type === \"Supplier\" && frm.doc.party) {\n//             frappe.db.get_value('Supplier', frm.doc.party, 'supplier_type')\n//                 .then(r => {\n//                     if (r && r.message && r.message.supplier_type) {\n//                         frm.set_value('custom_supplier_type', r.message.supplier_type);\n//                     } else {\n//                         frm.set_value('custom_supplier_type', '');\n//                     }\n//                 });\n//         } else {\n//             frm.set_value('custom_supplier_type', '');\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-09-07 15:25:00.030001",
  "module": "Mohan Impex",
  "name": "NEW RP",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    refresh: function(frm) {\n        frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function (doc, cdt, cdn) {\n            let row = locals[cdt][cdn];\n            return {\n                filters: [\n                    [\"has_variants\", \"=\", 0],\n                    [\"is_sales_item\", \"=\", 1],\n                    [\"variant_of\", \"=\", row.item_template]\n                ]\n            };\n        };\n    },\n});\n",
  "view": "Form"
 }
]