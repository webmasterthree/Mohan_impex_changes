[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "POS Invoice",
  "enabled": 1,
  "modified": "2025-04-06 11:19:38.322858",
  "module": "Mohan Impex",
  "name": "POS Invoice",
  "script": "frappe.ui.form.on('POS Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tonload(frm) {\n        if (!frm.is_new() || frm.doc.company) return;\n        frappe.db.get_list('Employee', {\n            filters: { user_id: frappe.session.user },\n            fields: ['company'],\n            limit: 1\n        }).then(r => {\n            if (r.length) frm.set_value('company', r[0].company);\n        });\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transport RFQ",
  "enabled": 1,
  "modified": "2025-05-26 17:52:29.915999",
  "module": "Mohan Impex",
  "name": "Transport RFQ Form",
  "script": "frappe.ui.form.on('Transport RFQ', {\n    onload: function(frm) {\n        frappe.call({\n            method: \"mohan_impex.user_roles.transporter_user\",\n            callback: function(r) {\n                if (r.message) {\n                    // Check if the row already exists\n                    let existing_rows = frm.doc.transporter_details.filter(row => row.transporter === r.message);\n\n                    if (existing_rows.length === 1 && frm.doc.transporter_details.length === 1) {\n                        // Don't touch the form if it's already set up properly\n                        return;\n                    }\n\n                    // Replace with only the matching row (or add it if missing)\n                    frm.clear_table(\"transporter_details\");\n\n                    let row = frm.add_child(\"transporter_details\");\n\n                    if (existing_rows.length) {\n                        Object.assign(row, existing_rows[0]); // copy data if already exists\n                    } else {\n                        row.transporter = r.message; // set if new\n                    }\n\n                    frm.refresh_field(\"transporter_details\");\n                }\n            }\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transport RFQ",
  "enabled": 0,
  "modified": "2025-04-11 13:27:26.772282",
  "module": null,
  "name": "Transport RFQ Amount",
  "script": "frappe.ui.form.on('Transporter Details', {\n    send: function(frm, cdt, cdn) {\n        let detail_row = locals[cdt][cdn];\n\n        if (!detail_row.transporter || !detail_row.quoted_amount) {\n            frappe.msgprint(\"Transporter or Quoted Amount is missing.\");\n            return;\n        }\n\n        let matched = false;\n\n        // Loop through 'transporters' table in the same doc\n        frm.doc.transporters.forEach(row => {\n            if (row.transporter === detail_row.transporter) {\n                row.quoted_amount = detail_row.quoted_amount;\n                matched = true;\n            }\n        });\n\n        if (matched) {\n            frm.refresh_field(\"transporters\");\n            frappe.msgprint(\"Quoted amount updated in Transporters table.\");\n        } else {\n            frappe.msgprint(\"Matching transporter not found in Transporters table.\");\n        }\n    }\n});\n\nfrappe.ui.form.on('Transport RFQ', {\n    onload: function(frm) {\n        // Fetch current user transporter and add to transporter_details (no clearing)\n        frappe.call({\n            method: \"mohan_impex.user_roles.transporter_user\", // update path if needed\n            callback: function(r) {\n                if (r.message) {\n                    // Check if transporter already exists in the child table\n                    let exists = frm.doc.transporter_details.some(row => row.transporter === r.message);\n                    if (!exists) {\n                        let row = frm.add_child(\"transporter_details\");\n                        row.transporter = r.message;\n                        frm.refresh_field(\"transporter_details\");\n                    }\n                }\n            }\n        });\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-04-17 12:16:51.932545",
  "module": "Mohan Impex",
  "name": "Rate Supplier Quotation Form",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n    onload: function(frm) {\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        // Only clear if it's a new doc AND user is unauthorized\n        if (!hasAccess && frm.is_new()) {\n            frm.doc.items.forEach(item => {\n                item.rate = 0;\n                item.amount = 0;\n            });\n            frm.refresh_field('items');\n        }\n    }\n});\n\nfrappe.ui.form.on('Supplier Quotation Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transport RFQ",
  "enabled": 1,
  "modified": "2025-04-04 14:02:48.964688",
  "module": "Mohan Impex",
  "name": "Transport RFQ List",
  "script": "frappe.call({\n    method: \"mohan_impex.user_roles.transporter_user\",\n    callback: function(response) {\n        if (response.message) {\n            frappe.set_route('List', 'Transport RFQ', 'List', {\n                'transporter': response.message\n            });\n        } \n    }\n});\n\nfrappe.listview_settings['Transport RFQ'] = {\n    onload: function(listview) {\n        frappe.call({\n            method: \"mohan_impex.user_roles.has_transporter_role\",\n            callback: function(response) {\n                if (response.message === true) {\n                    // Hide filters and buttons only for transporter role\n                    frappe.after_ajax(() => {\n                        $('.filter-selector').hide();\n                        $('.dropdown-menu').hide();\n                        $(\".menu-btn-group\").hide();\n                    });\n                    if (listview.page.fields_dict.pick_list)\n                    listview.page.fields_dict.pick_list.$wrapper.hide();\n                } \n            }\n        });\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2025-04-05 15:49:25.361728",
  "module": null,
  "name": "Auto suppleir",
  "script": "// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\n// License: GNU General Public License v3. See license.txt\n\ncur_frm.add_fetch(\"contact\", \"email_id\", \"email_id\");\n\nerpnext.buying.setup_buying_controller();\n\nfrappe.ui.form.on(\"Request for Quotation\", {\n\tsetup: function (frm) {\n\t\tfrm.custom_make_buttons = {\n\t\t\t\"Supplier Quotation\": \"Create\",\n\t\t};\n\n\t\tfrm.fields_dict[\"suppliers\"].grid.get_field(\"contact\").get_query = function (doc, cdt, cdn) {\n\t\t\tlet d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tquery: \"frappe.contacts.doctype.contact.contact.contact_query\",\n\t\t\t\tfilters: {\n\t\t\t\t\tlink_doctype: \"Supplier\",\n\t\t\t\t\tlink_name: d.supplier || \"\",\n\t\t\t\t},\n\t\t\t};\n\t\t};\n\n\t\tfrm.set_query(\"warehouse\", \"items\", () => ({\n\t\t\tfilters: {\n\t\t\t\tcompany: frm.doc.company,\n\t\t\t\tis_group: 0,\n\t\t\t},\n\t\t}));\n\t},\n\n\tonload: function (frm) {\n\t\tif (!frm.doc.message_for_supplier) {\n\t\t\tfrm.set_value(\"message_for_supplier\", __(\"Please supply the specified items at the best possible rates\"));\n\t\t}\n\t},\n\n\trefresh: function (frm) {\n\t\tif (frm.doc.docstatus === 1) {\n\t\t\tfrm.add_custom_button(__(\"Supplier Quotation\"), function () {\n\t\t\t\tfrm.trigger(\"make_supplier_quotation\");\n\t\t\t}, __(\"Create\"));\n\t\t}\n\t},\n\n\tmake_supplier_quotation: function (frm) {\n\t\tfrappe.call({\n\t\t\tmethod: \"mohan_impex.user_roles.get_supplier_for_user\",\n\t\t\tcallback: function (r) {\n\t\t\t\tif (r.message) {\n\t\t\t\t\tlet supplier = r.message;\n\t\t\t\t\tif (!frm.doc.suppliers.map(row => row.supplier).includes(supplier)) {\n\t\t\t\t\t\tfrappe.msgprint(__(\"Your supplier is not part of this RFQ.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tfrappe.call({\n\t\t\t\t\t\ttype: \"GET\",\n\t\t\t\t\t\tmethod: \"erpnext.buying.doctype.request_for_quotation.request_for_quotation.make_supplier_quotation_from_rfq\",\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tsource_name: frm.doc.name,\n\t\t\t\t\t\t\tfor_supplier: supplier,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfreeze: true,\n\t\t\t\t\t\tcallback: function (res) {\n\t\t\t\t\t\t\tif (!res.exc) {\n\t\t\t\t\t\t\t\tvar doc = frappe.model.sync(res.message);\n\t\t\t\t\t\t\t\tfrappe.set_route(\"Form\", res.message.doctype, res.message.name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tvar doc = frm.doc;\n\t\t\t\t\tvar dialog = new frappe.ui.Dialog({\n\t\t\t\t\t\ttitle: __(\"Create Supplier Quotation\"),\n\t\t\t\t\t\tfields: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfieldtype: \"Link\",\n\t\t\t\t\t\t\t\tlabel: __(\"Supplier\"),\n\t\t\t\t\t\t\t\tfieldname: \"supplier\",\n\t\t\t\t\t\t\t\toptions: \"Supplier\",\n\t\t\t\t\t\t\t\treqd: 1,\n\t\t\t\t\t\t\t\tget_query: () => {\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tfilters: [[\"Supplier\", \"name\", \"in\", frm.doc.suppliers.map((row) => row.supplier)]],\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tprimary_action_label: __(\"Create\"),\n\t\t\t\t\t\tprimary_action: (args) => {\n\t\t\t\t\t\t\tif (!args) return;\n\t\t\t\t\t\t\tdialog.hide();\n\t\t\t\t\t\t\treturn frappe.call({\n\t\t\t\t\t\t\t\ttype: \"GET\",\n\t\t\t\t\t\t\t\tmethod: \"erpnext.buying.doctype.request_for_quotation.request_for_quotation.make_supplier_quotation_from_rfq\",\n\t\t\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\t\t\tsource_name: doc.name,\n\t\t\t\t\t\t\t\t\tfor_supplier: args.supplier,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfreeze: true,\n\t\t\t\t\t\t\t\tcallback: function (r) {\n\t\t\t\t\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t\t\t\t\tvar doc = frappe.model.sync(r.message);\n\t\t\t\t\t\t\t\t\t\tfrappe.set_route(\"Form\", r.message.doctype, r.message.name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tdialog.show();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2025-03-15 10:42:15.123311",
  "module": null,
  "name": "Allow user Permission",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    refresh: function(frm) {\n        if (!frm.doc.suppliers || frm.doc.suppliers.length === 0) {\n            frm.disable_save();\n            frappe.throw(__('No suppliers found in this RFQ.'));\n            return;\n        }\n\n        // Variable to track if logged-in user is a supplier\n        let is_supplier = false;\n\n        // Iterate through each supplier in the RFQ\n        frm.doc.suppliers.forEach(supplier => {\n            if (supplier.email_id === frappe.session.user) {\n                is_supplier = true;\n            }\n        });\n\n        if (is_supplier) {\n            // Grant full permissions if user is a supplier\n            frm.perm = [{read: 1, write: 1, create: 1, submit: 1, cancel: 1}];\n            frm.refresh();\n        } else {\n            // Restrict access if user is NOT a supplier\n            frm.disable_save();\n            frappe.throw(__('You do not have permission to access this document.'));\n        }\n    }\n});\n\n\n\n// frappe.ui.form.on('Request for Quotation', {\n//     refresh: function(frm) {\n//         var allowed_users = ['daiyanalamnit@gmail.com'];\n        \n//         if (allowed_users.includes(frappe.session.user)) {\n//             // Override permission check\n//             frm.perm = [{read: 1, write: 1, create: 1, submit: 1, cancel: 1}];\n//             frm.refresh();\n//         } else {\n//             frm.disable_save();\n//             frappe.throw(__('You do not have permission to access this document.'));\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2025-04-05 16:53:44.961026",
  "module": null,
  "name": "Request for Quotation : filter according to supplier",
  "script": "frappe.listview_settings['Request for Quotation'] = {\n    onload: function(listview) {\n        let filters = [];\n        frappe.db.get_list('Request for Quotation', {\n            fields: ['name', 'suppliers'],\n            limit: 1\n        }).then(rfqs => {\n            if (rfqs.length > 0 && Array.isArray(rfqs[0].suppliers) && rfqs[0].suppliers.length > 0) {\n                let supplier_name = rfqs[0].suppliers[0].supplier;\n                filters.push([\"suppliers.supplier\", \"=\", supplier_name]);\n\n                listview.filter_area.add(filters);\n            } else {\n                frappe.msgprint({\n                    title: __('Warning'),\n                    message: __('No supplier found in any Request for Quotation'),\n                    indicator: 'orange'\n                });\n            }\n        });\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-04-05 17:00:33.427489",
  "module": null,
  "name": "Request for Quotation List",
  "script": "frappe.call({\n    method: \"mohan_impex.user_roles.get_supplier_for_user\",\n    callback: function(response) {\n        if (response.message) {\n            frappe.set_route('List', 'Request for Quotation', 'List', {\n                'supplier': response.message\n            });\n        } \n    }\n});\n\nfrappe.listview_settings['Request for Quotation'] = {\n    onload: function(listview) {\n        frappe.call({\n            method: \"mohan_impex.user_roles.has_supplier_role\",\n            callback: function(response) {\n                if (response.message === true) {\n                    // Hide filters and buttons only for transporter role\n                    frappe.after_ajax(() => {\n                        $('.filter-selector').hide();\n                        $('.dropdown-menu').hide();\n                        $(\".menu-btn-group\").hide();\n                    });\n                    if (listview.page.fields_dict.pick_list)\n                    listview.page.fields_dict.pick_list.$wrapper.hide();\n                } \n            }\n        });\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Transfer",
  "enabled": 1,
  "modified": "2025-03-27 11:08:21.112390",
  "module": "Mohan Impex",
  "name": "Employee Transfer",
  "script": "frappe.ui.form.on('Employee Transfer', {\n\tbefore_save(frm) {\n\t\tif (frm.doc.docstatus === 0) {\n\t\t\tconst current_user = frappe.session.user_fullname;\n\t\t\tconst roles = frappe.user_roles[0];\n\n\t\t\tfrm.set_value('custom_current_user', current_user);\n\t\t\tfrm.set_value('custom_roles', roles);\n\t\t}\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Letter of Promotion and Increment",
  "enabled": 1,
  "modified": "2025-03-28 14:52:47.843622",
  "module": null,
  "name": "Letter of Promotion and Increment",
  "script": "frappe.ui.form.on('Letter of Promotion and Increment', {\n\tbefore_save(frm) {\n\t\t// your code here\n\t\tfrm.set_value('current_user',frappe.session.user_fullname)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Letter of Promotion",
  "enabled": 1,
  "modified": "2025-03-28 15:56:23.102212",
  "module": null,
  "name": "Letter of Promotion",
  "script": "frappe.ui.form.on('Letter of Promotion', {\n\tbefore_save(frm) {\n\t\t// your code here\n\t\tfrm.set_value('current_user',frappe.session.user_fullname)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-04-17 21:35:29.201439",
  "module": "Mohan Impex",
  "name": "Sales Invoice",
  "script": "frappe.ui.form.on(\"Sales Invoice\", {\n    custom_pod_attachment: function(frm) {\n        if (frm.doc.custom_pod_attachment) {\n            frm.set_value(\"custom_proof_of_delivery_status\", \"Uploaded\");\n        }\n        set_item_code_filter(frm)\n    },\n    refresh(frm){\n        set_item_code_filter(frm)\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\nfrappe.ui.form.on('Sales Invoice Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-04-03 17:23:36.142271",
  "module": "Mohan Impex",
  "name": "Sales Flow",
  "script": "frappe.ui.form.on(\"Sales Order\", {\n    customer: function(frm) {\n        // Reset custom_outstanding_amount only\n        frm.set_value(\"custom_outstanding_amount\", 0);\n\n        if (frm.doc.company && frm.doc.customer) {\n            frappe.call({\n                method: \"erpnext.accounts.utils.get_balance_on\",\n                args: {\n                    party_type: \"Customer\",\n                    party: frm.doc.customer,\n                    company: frm.doc.company\n                },\n                callback: function(r) {\n                    if (!r.exc && r.message != null) {\n                        const balance = r.message;\n\n                        frm.set_value(\"custom_outstanding_amount\", balance);\n\n                        frm.refresh_field(\"custom_outstanding_amount\");\n                    }\n                }\n            });\n        }\n    },\n\n    refresh: function(frm) {\n        // No action needed since approval field is removed\n    },\n\n    before_save: function(frm) {\n        // Clean up any unwanted fields from child table\n        frm.doc.items.forEach(row => {\n            if (row.available_quantity && typeof row.available_quantity !== \"number\") {\n                row.available_quantity = 0;\n            }\n        });\n    }\n});\n\n// Update available quantity safely from backend response\nfrappe.ui.form.on('Sales Order Item', {\n    item_code: function(frm, cdt, cdn) {\n        update_available_quantity(frm, cdt, cdn);\n    },\n    warehouse: function(frm, cdt, cdn) {\n        update_available_quantity(frm, cdt, cdn);\n    }\n});\n\nfunction update_available_quantity(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    if (row.item_code && row.warehouse) {\n        frappe.call({\n            method: \"mohan_impex.Sales.available_stock.get_item_stock\",\n            args: {\n                item_code: row.item_code,\n                warehouse: row.warehouse\n            },\n            callback: function(r) {\n                if (r.message && typeof r.message === \"object\" && \"actual_qty\" in r.message) {\n                    frappe.model.set_value(cdt, cdn, \"available_quantity\", r.message.actual_qty);\n                } else {\n                    frappe.model.set_value(cdt, cdn, \"available_quantity\", 0);\n                }\n            }\n        });\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pick List",
  "enabled": 1,
  "modified": "2025-05-29 11:29:48.018667",
  "module": "Mohan Impex",
  "name": "Pick List 2",
  "script": "frappe.ui.form.on('Pick List', {\n    refresh: function(frm) {\n        if (!frm.doc.__islocal && frm.doc.docstatus === 1) {\n            frm.add_custom_button(__('Create Transport RFQ'), function() {\n                frappe.model.with_doctype('Transport RFQ', function() {\n                    let new_doc = frappe.model.get_new_doc('Transport RFQ');\n                    new_doc.pick_list = frm.doc.name;\n                    new_doc.from_location = frm.doc.parent_warehouse;\n                    new_doc.to_location = frm.doc.to_warehouse || '';\n                    new_doc.transport_date = frappe.datetime.now_date();\n\n                    // Copy data from Pick List's locations table\n                    (frm.doc.locations || []).forEach((row) => {\n                        let child = frappe.model.add_child(new_doc, 'Transport RFQ Item', 'locations');\n                        child.item_code = row.item_code;\n                        child.qty = row.qty;\n                        child.uom = row.uom;\n                        // Add more fields if needed\n                    });\n\n                    frappe.set_route('Form', 'Transport RFQ', new_doc.name);\n                });\n            }, __('Create'));\n        }\n        set_item_code_filter(frm)\n    }\n});\nfrappe.ui.form.on('Pick List Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.locations.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.locations.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"locations\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\nfrappe.ui.form.on('Pick List', {\n    onload: function(frm) {\n        if (!frm.doc.custom_shipping_address && frm.doc.locations?.length > 0) {\n            const so_name = frm.doc.locations[0].sales_order;\n\n            if (so_name) {\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Sales Order',\n                        name: so_name\n                    },\n                    callback: function(r) {\n                        if (r.message && r.message.shipping_address) {\n                            const clean_address = stripHtmlAddress(r.message.shipping_address);\n                            frm.set_value('custom_shipping_address', clean_address);\n                        }\n                    }\n                });\n            }\n        }\n    }\n});\n\nfunction stripHtmlAddress(html) {\n    return html.replace(/<br\\s*\\/?>/gi, '\\n').trim();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transport RFQ",
  "enabled": 0,
  "modified": "2025-04-03 19:19:25.792129",
  "module": "Mohan Impex",
  "name": "Transport RFQ",
  "script": "let original_transporters = [];\n\nfrappe.ui.form.on('Transport RFQ', {\n  refresh: function (frm) {\n    // Add a custom button to apply filter\n    frm.add_custom_button(\"Filter: Test Supplier\", function () {\n      // Backup full list only once\n      if (original_transporters.length === 0) {\n        original_transporters = JSON.parse(JSON.stringify(frm.doc.transporters));\n      }\n\n      // Filter matching rows\n      const filtered = original_transporters.filter(row => row.transporter_name === \"Test Supplier\");\n\n      // Replace table content with filtered data\n      frm.clear_table('transporters');\n      filtered.forEach(row => {\n        const new_row = frm.add_child('transporters');\n        Object.assign(new_row, row);\n      });\n      frm.refresh_field('transporters');\n    });\n\n    // Add a reset button to restore all original rows\n    frm.add_custom_button(\"Clear Filter\", function () {\n      if (original_transporters.length > 0) {\n        frm.clear_table('transporters');\n        original_transporters.forEach(row => {\n          const new_row = frm.add_child('transporters');\n          Object.assign(new_row, row);\n        });\n        frm.refresh_field('transporters');\n      }\n    });\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2025-02-13 16:14:33.983468",
  "module": null,
  "name": "Pack Type and Pack Size",
  "script": "frappe.ui.form.on('Material Request', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "About Us Settings",
  "enabled": 1,
  "modified": "2024-11-20 12:53:41.448413",
  "module": null,
  "name": "Test",
  "script": "frappe.ui.form.on('About Us Settings', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Checkin",
  "enabled": 0,
  "modified": "2024-12-13 14:02:48.025244",
  "module": null,
  "name": "Entry Type",
  "script": "// frappe.ui.form.on('Employee Checkin', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\tfrm.set_value('entry','ujwal')\n// \t}\n// })\n\nfrappe.ui.form.on('Employee Checkin', {\n    validate: function(frm) {\n        // Set the fixed entry time as 10:00 AM\n        const entry_time = moment(\"10:00 AM\", \"h:mm A\"); // Fixed entry time: 10 AM\n        const actual_time = moment(frm.doc.checkin_time); // Actual check-in time entered by employee\n\n        // Calculate the time difference in minutes\n        if (actual_time.isValid()) {\n            let time_diff = actual_time.diff(entry_time, 'minutes'); // Difference in minutes\n\n            if (Math.abs(time_diff) > 15) { // Only consider entries outside the 15-minute window\n                const hours = Math.floor(Math.abs(time_diff) / 60);\n                const minutes = Math.abs(time_diff) % 60;\n\n                // Set the custom_entry field based on the time difference\n                if (time_diff < 0) {\n                    frm.set_value('entry', 'Early Entry');\n                } else {\n                    frm.set_value('entry', 'Late Entry');\n                }\n\n                // Set the custom_time_diff field in hours and minutes\n                frm.set_value('time_diff', `${hours} hour${hours > 1 ? 's' : ''} ${minutes} minute${minutes > 1 ? 's' : ''}`);\n            } else {\n                // If within the 15-minute window, mark as \"On Time\"\n                frm.set_value('entry', 'On Time');\n                frm.set_value('time_diff', '0 hours 0 minutes');\n            }\n\n        } else {\n            frappe.msgprint(__('Invalid Check-in Time'));\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2024-12-30 19:21:39.900465",
  "module": null,
  "name": "emp_fullname",
  "script": "frappe.ui.form.on('Employee', {\n    reports_to: function (frm) {\n        if (frm.doc.reports_to) {\n            // Fetch the Employee Name for Reports To\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Employee',\n                    fieldname: 'employee_name',\n                    filters: {\n                        name: frm.doc.reports_to // 'Reports To' field stores the Employee ID\n                    }\n                },\n                callback: function (response) {\n                    if (response.message) {\n                        // Set the Employee Name in the 'reports_one_name' field\n                        frm.set_value('reports_one_name', response.message.employee_name);\n                    } else {\n                        // Clear the field if no result is found\n                        frm.set_value('reports_one_name', null);\n                        frappe.msgprint(__('Employee not found for the given Reports To ID.'));\n                    }\n                }\n            });\n        } else {\n            // Clear the field if Reports To is empty\n            frm.set_value('reports_one_name', null);\n        }\n    },\n\n    reports_two: function (frm) {\n        if (frm.doc.reports_two) {\n            // Fetch the Employee Name for Reports Two\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Employee',\n                    fieldname: 'employee_name',\n                    filters: {\n                        name: frm.doc.reports_two // 'Reports Two' field stores the Employee ID\n                    }\n                },\n                callback: function (response) {\n                    if (response.message) {\n                        // Set the Employee Name in the 'reports_two_name' field\n                        frm.set_value('reports_two_name', response.message.employee_name);\n                    } else {\n                        // Clear the field if no result is found\n                        frm.set_value('reports_two_name', null);\n                        frappe.msgprint(__('Employee not found for the given Reports Two ID.'));\n                    }\n                }\n            });\n        } else {\n            // Clear the field if Reports Two is empty\n            frm.set_value('reports_two_name', null);\n        }\n    }\n});\n\n// frappe.ui.form.on('Employee', {\n//     reports_to: function (frm) {\n//         if (frm.doc.reports_to) {\n//             // Fetch the Employee Name based on the Reports To (Employee ID)\n//             frappe.call({\n//                 method: 'frappe.client.get_value',\n//                 args: {\n//                     doctype: 'Employee',\n//                     fieldname: 'employee_name',\n//                     filters: {\n//                         name: frm.doc.reports_to // 'Reports To' field stores the Employee ID\n//                     }\n//                 },\n//                 callback: function (response) {\n//                     if (response.message) {\n//                         // Set the Employee Name in the 'reports_to_employee_name' field\n//                         frm.set_value('reports_one_name', response.message.employee_name);\n//                     } else {\n//                         // Clear the field if no result is found\n//                         frm.set_value('reports_one_name', null);\n//                         frappe.msgprint(__('Employee not found for the given Reports To ID.'));\n//                     }\n//                 }\n//             });\n//         } else {\n//             // Clear the field if Reports To is empty\n//             frm.set_value('reports_one_name', null);\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2024-12-30 19:23:17.624090",
  "module": null,
  "name": "Number of Year",
  "script": " \nfrappe.ui.form.on('Employee', {\n    refresh(frm) {\n        // Ensure that we set the value if the 'date_of_joining' is already set when the form loads\n        if (frm.doc.date_of_joining) {\n            update_years_months_days(frm);\n        }\n    },\n\n    // This will trigger whenever 'date_of_joining' field is changed\n    date_of_joining: function(frm) {\n        // When the date_of_joining is changed, recalculate years, months, and days\n        if (frm.doc.date_of_joining) {\n            update_years_months_days(frm);\n        }\n    }\n});\n\nfunction update_years_months_days(frm) {\n    const joining_date = frm.doc.date_of_joining;\n    const current_date = frappe.datetime.nowdate();\n\n    // Calculate the difference in days\n    const total_days_diff = frappe.datetime.get_diff(current_date, joining_date);\n\n    // Calculate the number of full years\n    const years = Math.floor(total_days_diff / 365);\n\n    // Calculate the remaining days after extracting years\n    const remaining_days_after_years = total_days_diff - years * 365;\n\n    // Calculate the number of full months\n    const months = Math.floor(remaining_days_after_years / 30); // Approximate months (30 days per month)\n\n    // Calculate the remaining days after extracting months\n    const remaining_days = remaining_days_after_years - months * 30; // Approximate remaining days\n\n    // Format the result as \"X years Y months Z days\"\n    let years_and_months_days = `${years} years`;\n    if (months > 0) {\n        years_and_months_days += ` ${months} months`;\n    }\n    if (remaining_days > 0) {\n        years_and_months_days += ` ${remaining_days} days`;\n    }\n\n    // Set the value in the custom field\n    frm.set_value('total_number_of_year_in_mi', years_and_months_days);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work From Home",
  "enabled": 1,
  "modified": "2025-01-25 11:26:26.108625",
  "module": null,
  "name": "Work From Home Approval",
  "script": "// frappe.ui.form.on('Work From Home', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('Work From Home', {\n    status: function (frm) {\n        frm.set_df_property('work_update', 'read_only', frm.doc.status !== 'Approved');\n    },\n\n    refresh: function (frm) {\n        frm.set_df_property('work_update', 'read_only', frm.doc.status !== 'Approved');\n    }\n});\n\n ",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 0,
  "modified": "2025-03-10 17:01:37.651004",
  "module": null,
  "name": "roles_permissions_tab",
  "script": " frappe.ui.form.on('User', {\n    refresh: function(frm) {\n        // Check if the role_profile_name is 'HR'\n        if (frm.doc.role_profile_name === 'HR') {\n            // Ensure the roles_permissions_tab is visible for HR\n            frm.fields_dict['roles_permissions_tab'].df.hidden = false; // Set hidden to false\n            frm.fields_dict['roles_permissions_tab'].refresh(); // Refresh the tab to apply changes\n        } else {\n            // Hide the roles_permissions_tab if the role profile is not 'HR'\n            frm.fields_dict['roles_permissions_tab'].df.hidden = true; // Set hidden to true\n            frm.fields_dict['roles_permissions_tab'].refresh(); // Refresh the tab to apply changes\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Checkin",
  "enabled": 0,
  "modified": "2025-03-10 17:00:17.422372",
  "module": null,
  "name": "Daily Attendance Sheet",
  "script": " frappe.ui.form.on('Daily Attendance Sheet', {\n    refresh: function(frm) {\n        // Wait for the table to be rendered and then apply the custom width\n        setTimeout(function() {\n            // Adjust the width of the 'SHIFT' column after rendering\n            $('table.table').find('th').each(function(index) {\n                if ($(this).text().trim() == 'shift') {\n                    $('table.table').find('td:nth-child(' + (index + 1) + ')').css('width', '500px');\n                }\n            });\n        }, 500);  // Adjust timeout as needed\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2024-12-30 19:23:06.615238",
  "module": null,
  "name": "filter",
  "script": "frappe.query_reports[\"Daily Attendace Report\"] = {\n    onload: function(report) {\n        // Set the default value for the date filter to today's date\n        report.filters.forEach(function(filter) {\n            if (filter.fieldname === \"date\") {\n                filter.set_input(frappe.datetime.get_today());\n            }\n        });\n    }\n};\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee Checkin",
  "enabled": 0,
  "modified": "2024-12-13 14:08:53.946409",
  "module": null,
  "name": "Date Fomate",
  "script": "frappe.ui.form.on('Employee Checkin', {\n    before_save: function (frm) {\n        if (frm.doc.time) {\n            // Extract the time\n            const time = frm.doc.time;\n\n            // Get the current date\n            const today = frappe.datetime.get_today(); // e.g., \"2024-11-21\"\n\n            // Combine date and time\n            const datetime = `${today} ${time}`;\n\n            // Set the full datetime value\n            frm.set_value('time', datetime);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2024-12-30 19:21:53.016797",
  "module": null,
  "name": "No of Yaer In MI",
  "script": "frappe.ui.form.on('Employee', {\n    refresh(frm) {\n        // Ensure that we set the value if the 'date_of_joining' is already set when the form loads\n        if (frm.doc.date_of_joining) {\n            update_years_months_days(frm);\n        }\n    },\n\n    // This will trigger whenever 'date_of_joining' field is changed\n    date_of_joining: function(frm) {\n        // When the date_of_joining is changed, recalculate years, months, and days\n        if (frm.doc.date_of_joining) {\n            update_years_months_days(frm);\n        }\n    }\n});\n\nfunction update_years_months_days(frm) {\n    const joining_date = frm.doc.date_of_joining;\n    const current_date = frappe.datetime.nowdate();\n\n    // Calculate the difference in days\n    const total_days_diff = frappe.datetime.get_diff(current_date, joining_date);\n\n    // Calculate the number of full years\n    const years = Math.floor(total_days_diff / 365);\n\n    // Calculate the remaining days after extracting years\n    const remaining_days_after_years = total_days_diff - years * 365;\n\n    // Calculate the number of full months\n    const months = Math.floor(remaining_days_after_years / 30); // Approximate months (30 days per month)\n\n    // Calculate the remaining days after extracting months\n    const remaining_days = remaining_days_after_years - months * 30; // Approximate remaining days\n\n    // Format the result as \"X years Y months Z days\"\n    let years_and_months_days = `${years} years`;\n    if (months > 0) {\n        years_and_months_days += ` ${months} months`;\n    }\n    if (remaining_days > 0) {\n        years_and_months_days += ` ${remaining_days} days`;\n    }\n\n    // Set the value in the custom field\n    frm.set_value('total_number_of_year_in_mi', years_and_months_days);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2024-12-14 14:51:56.364726",
  "module": null,
  "name": "MTQ",
  "script": "frappe.ui.form.on('Material Request Item', {\n    item_code: function(frm, cdt, cdn) {\n        var row = locals[cdt][cdn];\n        \n        // Fetching Item details including Item Name, Pack Type, and Pack Size\n        if (row.item_code) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'Item',\n                    name: row.item_code\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        let itemData = response.message;\n\n                        // Set Item Name\n                        frappe.model.set_value(cdt, cdn, 'item_name', itemData.item_name);\n\n                        // Ensure that the 'brand' field is a Select field in the child table\n                        let brandField = frm.fields_dict['items'].grid.get_field('brand');\n                        let brandOptions = [];\n\n                        // Add options from select_brand array to the brand field\n                        if (Array.isArray(itemData.select_brand) && itemData.select_brand.length > 0) {\n                            itemData.select_brand.forEach(function(brand) {\n                                brandOptions.push(brand.brand_item); // Adjust based on the correct structure\n                            });\n                        }\n\n                        // If there's only one brand_name, set it as the default value\n                        if (itemData.brand_name && itemData.select_brand.length === 0) {\n                            brandOptions.push(itemData.brand_name);\n                            frappe.model.set_value(cdt, cdn, 'brand', itemData.brand_name);\n                        }\n\n                        // If no brand data is found, set \"Brand Not Available\"\n                        if (brandOptions.length === 0) {\n                            // Add \"Brand Not Available\" as a selectable option in the Select field\n                            brandOptions.push('Brand Not Available');\n                            frappe.model.set_value(cdt, cdn, 'brand', 'Brand Not Available');\n                        }\n\n                        // Set the options for the Select field dynamically\n                        brandField.options = brandOptions.join(\"\\n\");\n\n                        // Refresh the field to reflect changes in the form\n                        frm.fields_dict['items'].grid.refresh();\n\n                    } else {\n                        frappe.msgprint(__('Item details not found for the given Item Code'));\n                    }\n                },\n                error: function(error) {\n                    console.error('Error fetching Item details:', error);\n                    frappe.msgprint(__('Unable to fetch Item details. Please try again.'));\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Dynamic OPtion",
  "enabled": 1,
  "modified": "2024-12-14 18:38:29.443024",
  "module": null,
  "name": "Option",
  "script": "frappe.ui.form.on('Dynamic OPtion', {\n    refresh: function(frm) {\n        // Dynamically set options for the \"Brand\" field\n        frm.set_df_property('brand', 'options', 'Option1\\nOption2');\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Allocation",
  "enabled": 1,
  "modified": "2024-12-16 15:01:51.409461",
  "module": null,
  "name": "Leave Allocation Deletion",
  "script": "frappe.listview_settings['Leave Allocation'] = {\n    onload: function(listview) {\n        // Override the default page size to show only 10 records\n        listview.page_length = 10;\n        listview.refresh();\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2024-12-30 19:22:52.126484",
  "module": "",
  "name": "Attendance Sheet",
  "script": "frappe.ui.form.on('Employee', {\n    refresh: function(frm) {\n        // Add a custom button to the Employee form\n        frm.add_custom_button(__('View Attendance'), function() {\n            // Call the method to fetch employee attendance data\n            frappe.call({\n                method: 'erpnext.attendance.employee_attendance', // Adjust to your actual method path\n                callback: function(response) {\n                    // Check if data was returned\n                    if (response.message && response.message.data) {\n                        // Create a simple HTML table to display the attendance data\n                        let table_html = `\n                            <table class=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th>Employee ID</th>\n                                        <th>Employee Name</th>\n                                        <th>Location</th>\n                                        <th>Shift</th>\n                                        <th>In Time</th>\n                                        <th>Out Time</th>\n                                        <th>Status</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                        `;\n\n                        // Loop through the data and create table rows\n                        response.message.data.forEach(function(row) {\n                            table_html += `\n                                <tr>\n                                    <td>${row.EMPLOYEE_ID}</td>\n                                    <td>${row.EMPLOYEE_NAME}</td>\n                                    <td>${row.LOCATION}</td>\n                                    <td>${row.SHIFT}</td>\n                                    <td>${row.IN_TIME}</td>\n                                    <td>${row.OUT_TIME}</td>\n                                    <td>${row.STATUS}</td>\n                                </tr>\n                            `;\n                        });\n\n                        table_html += `</tbody></table>`;\n\n                        // Display the table in a dialog\n                        var dialog = new frappe.ui.Dialog({\n                            title: 'Employee Attendance Data',\n                            fields: [\n                                {\n                                    'fieldtype': 'HTML',\n                                    'fieldname': 'attendance_table',\n                                    'options': table_html\n                                }\n                            ]\n                        });\n\n                        dialog.show();\n                    } else {\n                        // If no data returned, show a message\n                        frappe.msgprint(__('No attendance data found.'));\n                    }\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-12-23 11:46:30.351047",
  "module": null,
  "name": "Creditor Group",
  "script": "// frappe.ui.form.on('Supplier', {\n//     creditors_group: function (frm) {\n//         if (frm.doc.creditors_group) {\n//             // Fetch the Account Name for the selected Creditors Group\n//             frappe.call({\n//                 method: 'frappe.client.get_value',\n//                 args: {\n//                     doctype: 'Account',\n//                     fieldname: 'account_name',\n//                     filters: {\n//                         name: frm.doc.creditors_group\n//                     }\n//                 },\n//                 callback: function (response) {\n//                     if (response.message && response.message.account_name) {\n//                         // Set the Account Name in the Creditors Group field\n//                         frm.set_value('creditors_group', response.message.account_name);\n//                     }\n//                 }\n//             });\n//         }\n//     }\n// });\n\n\n// frappe.ui.form.on('Supplier', {\n//     creditors_group: function (frm) {\n//         if (frm.doc.creditors_group) {\n//             frappe.db.get_value('Account', frm.doc.creditors_group, 'account_name')\n//                 .then(r => {\n//                     if (r.message && r.message.account_name) {\n//                         frm.set_value('creditors_group', r.message.account_name);\n//                     }\n//                 });\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Group",
  "enabled": 1,
  "modified": "2024-12-21 18:38:45.128241",
  "module": null,
  "name": "All Supplier Groups",
  "script": "frappe.ui.form.on('Supplier Group', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_value('parent_supplier_group','All Supplier Groups');\n\t}\n})\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2024-12-24 11:20:40.004885",
  "module": null,
  "name": "Address Deletion",
  "script": "frappe.listview_settings['Address'] = {\n    onload: function(listview) {\n        // Override the default page size to show only 10 records\n        listview.page_length = 10;\n        listview.refresh();\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work From Home",
  "enabled": 0,
  "modified": "2025-01-25 11:15:32.584881",
  "module": null,
  "name": "Status",
  "script": "frappe.ui.form.on('Work From Home', {\n    refresh(frm) {\n        // Check if the logged-in user is not 'Administrator'\n        if (frappe.session.user !== 'Administrator') {\n            // Set the 'status' field to read-only\n            frm.set_df_property('status', 'read_only', true);\n        }\n    }\n});\n\n\n// frappe.ui.form.on('Work From Home', {\n//     status: function (frm) {\n//         frm.set_df_property('work_update', 'read_only', \n//             frm.doc.status !== 'Approved' || frappe.session.user !== 'Administrator');\n//     },\n\n//     refresh: function (frm) {\n//         frm.set_df_property('work_update', 'read_only', \n//             frm.doc.status !== 'Approved' || frappe.session.user !== 'Administrator');\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-12-25 21:25:12.015272",
  "module": null,
  "name": "link field increase",
  "script": "// frappe.ui.form.on('Customer', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n\nfrappe.ui.form.on(\"Customer\", {\n  setup(frm) {\n    frm.set_query(\"sm\", () => {\n      return { page_length: 100 };\n    });\n  },\n});\n\n\n// frappe.ui.form.on(\"Customer\", {\n//   setup(frm) {\n//     frm.set_query(\"sm\", () => {\n//       return {\n//         page_length: 32,\n//         filters: [\n//           [\"name\", \"like\", \"%sm%\"]\n//         ]\n//       };\n//     });\n//   },\n// });\n\nfrappe.ui.form.on(\"Customer\", {\n  setup(frm) {\n    frm.set_query(\"sm\", () => {\n      return {\n        page_length: 32,\n        fields: [\"sm\"], // Specify only the 'id' field to be returned\n      };\n    });\n  },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-12-30 19:30:22.792566",
  "module": "Mohan Impex",
  "name": "employee reset",
  "script": "frappe.ui.form.on('Employee', {\n    // Trigger on any field change\n    fieldname_change: function(frm) {\n        // Log the rephrase action (customize for your specific needs)\n        console.log('Field rephrased or updated.');\n\n        // Example: Perform an automatic save\n        frm.save()\n            .then(() => {\n                frappe.msgprint(__('Record saved automatically.'));\n            })\n            .catch(err => {\n                console.error('Error during auto-save:', err);\n            });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2024-12-31 17:45:41.192400",
  "module": "Mohan Impex",
  "name": "Item Group Filter",
  "script": "frappe.ui.form.on('Item', {\n    onload: function(frm) {\n        frm.set_query('item_group', function() {\n            return {\n                filters: {\n                    is_group: 0\n                }\n            };\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-04-22 12:16:17.244808",
  "module": "Mohan Impex",
  "name": "Pack type length",
  "script": "frappe.ui.form.on('Item', {\n    before_save(frm) {\n        if (frm.doc.has_variants) {\n            frappe.call({\n                method: \"mohan_impex.Item_brand.update_variant_brands\",\n                args: {\n                    item_template: frm.doc.name,\n                    brands: frm.doc.custom_select_brand  // send as-is: list of rows\n                },\n                callback: function() {\n                    frappe.msgprint(\"Brands synced to all variants.\");\n                }\n            });\n        }\n    }\n});\n\n\n// frappe.ui.form.on('Item', {\n//     refresh(frm) {\n//         if (frm.doc.has_variants) {\n//             frm.add_custom_button('Sync Brands to Variants', () => {\n//                 frappe.call({\n//                     method: \"mohan_impex.Item_brand.update_variant_brands\",\n//                     args: {\n//                         item_template: frm.doc.name,\n//                         brands: frm.doc.custom_select_brand  // send as-is: list of rows\n//                     },\n//                     callback: function() {\n//                         frappe.msgprint(\"Brands synced to all variants.\");\n//                     }\n//                 });\n//             });\n//         }\n//     }\n// });\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "HSN SAC",
  "enabled": 0,
  "modified": "2025-01-08 11:20:53.204572",
  "module": "Mohan Impex",
  "name": "HSN SAC Deletion",
  "script": "frappe.listview_settings['HSN SAC'] = {\n    onload: function(listview) {\n        // Override the default page size to show only 10 records\n        listview.page_length = 10;\n        listview.refresh();\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Asset",
  "enabled": 0,
  "modified": "2025-01-20 15:15:54.068730",
  "module": "Mohan Impex",
  "name": "Asset Deletion",
  "script": "frappe.listview_settings['Asset'] = {\n    onload: function(listview) {\n        // Override the default page size to show only 10 records\n        listview.page_length = 10;\n        listview.refresh();\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Assignment",
  "enabled": 1,
  "modified": "2025-01-16 13:46:38.188841",
  "module": "Mohan Impex",
  "name": "Shift Location for Work From Home",
  "script": "frappe.ui.form.on('Shift Assignment', {\n    refresh(frm) {\n        // Check the value of shift_type and toggle the visibility of shift_location\n        if (frm.doc.shift_type === \"Work From Home\") {\n            frm.set_df_property('shift_location', 'hidden', true);\n        } else {\n            frm.set_df_property('shift_location', 'hidden', false);\n        }\n    },\n    shift_type(frm) {\n        // Trigger visibility logic when shift_type is changed\n        if (frm.doc.shift_type === \"Work From Home\") {\n            frm.set_df_property('shift_location', 'hidden', true);\n        } else {\n            frm.set_df_property('shift_location', 'hidden', false);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-03-11 14:18:43.279817",
  "module": "Mohan Impex",
  "name": "Item Code Length",
  "script": " frappe.ui.form.on('Purchase Order Item', {\n\t etup(frm) {\n    frm.set_query(\"item_code\", () => {\n      return { page_length: 100 };\n    });\n  },\n})\n\n ",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-05-07 16:19:46.809408",
  "module": "Mohan Impex",
  "name": "BR:PI",
  "script": "frappe.ui.form.on('Purchase Invoice Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\nfrappe.ui.form.on(\"Purchase Invoice\", {\n    refresh(frm){\n        set_item_code_filter(frm)\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-01-24 15:39:57.338539",
  "module": "Mohan Impex",
  "name": "Lead Others",
  "script": "frappe.ui.form.on('Lead', {\n    refresh: function (frm) {\n        // Trigger on form refresh to handle field visibility\n        toggle_custom_specify_lead_type(frm);\n    },\n    custom_select_lead_type: function (frm) {\n        // Trigger when the value of custom_select_lead_type changes\n        toggle_custom_specify_lead_type(frm);\n    }\n});\n\n// Helper function to toggle the visibility of custom_specify_lead_type\nfunction toggle_custom_specify_lead_type(frm) {\n    if (frm.doc.custom_select_lead_type === \"Others\") {\n        frm.set_df_property('custom_specify_lead_type', 'hidden', 0); // Show the field\n    } else {\n        frm.set_df_property('custom_specify_lead_type', 'hidden', 1); // Hide the field\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 0,
  "modified": "2025-02-08 11:38:50.036265",
  "module": "Mohan Impex",
  "name": "Lead Request type",
  "script": "frappe.ui.form.on('Lead', {\n    refresh: function (frm) {\n        // Trigger on form refresh to handle field visibility\n        toggle_custom_specify_request_type(frm);\n    },\n    custom_select_request_type: function (frm) {\n        // Trigger when the value of custom_select_lead_type changes\n        toggle_custom_specify_request_type(frm);\n    }\n});\n\n// Helper function to toggle the visibility of custom_specify_lead_type\nfunction toggle_custom_specify_request_type(frm) {\n    if (frm.doc.custom_select_request_type === \"Others\") {\n        frm.set_df_property('custom_specify_request_type', 'hidden', 0); // Show the field\n    } else {\n        frm.set_df_property('custom_specify_request_type', 'hidden', 1); // Hide the field\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work From Home",
  "enabled": 0,
  "modified": "2025-01-28 19:06:26.620465",
  "module": "Mohan Impex",
  "name": "WFH: handling_date",
  "script": "frappe.ui.form.on('Work From Home', 'validate', function(frm) {\n    const today = frappe.datetime.get_today(); // Get today's date in \"YYYY-MM-DD\" format\n\n    // Check if From Date is in the past\n    if (frm.doc.from_date && frappe.datetime.str_to_obj(frm.doc.from_date) < frappe.datetime.str_to_obj(today)) {\n        frappe.msgprint(__('You cannot select a past date in From Date.'));\n        frappe.validated = false; // Prevent form submission\n        return;\n    }\n\n    // Check if To Date is in the past\n    if (frm.doc.to_date && frappe.datetime.str_to_obj(frm.doc.to_date) < frappe.datetime.str_to_obj(today)) {\n        frappe.msgprint(__('You cannot select a past date in To Date.'));\n        frappe.validated = false; // Prevent form submission\n        return;\n    }\n\n    // Check if To Date is before From Date\n    if (\n        frm.doc.from_date && \n        frm.doc.to_date && \n        frappe.datetime.str_to_obj(frm.doc.from_date) > frappe.datetime.str_to_obj(frm.doc.to_date)\n    ) {\n        frappe.msgprint(__('To Date cannot be before From Date.'));\n        frappe.validated = false; // Prevent form submission\n        return; // Ensure no further processing happens\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Allocation",
  "enabled": 0,
  "modified": "2025-01-29 19:22:47.932827",
  "module": "Mohan Impex",
  "name": "Emp_fullname for Leave Allocation",
  "script": "frappe.ui.form.on('Leave Allocation', {\n    refresh(frm) {\n        frm.set_query(\"employee\", function() {\n            return {\n                filters: {\n                    \"status\": \"Active\" // Show only active employees\n                }\n            };\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-03-10 16:54:10.403338",
  "module": "Mohan Impex",
  "name": "sub_department_filter",
  "script": "frappe.ui.form.on('Employee', {\n    onload: function(frm) { \n        frm.trigger('set_department_query');\n        frm.trigger('set_sub_department_query');\n    },\n    \n    department: function(frm) {\n        frm.set_value(\"sub_department\", \"\"); // Reset sub_department when department changes\n        frm.trigger('set_sub_department_query');\n    },\n\n    set_department_query: function(frm) {\n        frm.set_query(\"department\", function() {\n            return {\n                filters: [\n                    [\"parent_department\", \"in\", [\"\", \"All Departments\"]], // Top-level departments\n                    [\"is_group\", \"=\", 1] // Ensure only main departments show\n                ]\n            };\n        });\n    },\n\n    set_sub_department_query: function(frm) {\n        if (!frm.doc.department) {\n            frm.set_query(\"sub_department\", function() {\n                return { filters: {} }; // Clear filter if no department is selected\n            });\n            return;\n        }\n\n        frm.set_query(\"sub_department\", function() {\n            return {\n                filters: {\n                    \"parent_department\": frm.doc.department // Show only sub-departments of selected main department\n                }\n            };\n        });\n    },\n\n    // sub_department: function(frm) {\n    //     if (!frm.doc.department) {\n    //         frappe.msgprint({\n    //             message: __('Please select a Department first.'),\n    //             indicator: 'red'\n    //         });\n    //         frm.set_value('sub_department', ''); // Clear the sub_department field\n    //         frm.trigger('set_sub_department_query'); // Reapply the filter\n    //     }\n    // }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BOM",
  "enabled": 1,
  "modified": "2025-01-31 15:21:33.087764",
  "module": "Mohan Impex",
  "name": "BOM Item",
  "script": "frappe.ui.form.on('BOM', {\n    onload: function(frm) {\n        let parent_groups = [\"MP\", \"PM\", \"RM\"];  // Main groups\n        let all_groups = [...parent_groups];  // Store all descendant groups\n\n        function fetchChildGroups(groups, callback) {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Item Group\",\n                    filters: [\n                        [\"parent_item_group\", \"in\", groups]\n                    ],\n                    fields: [\"name\"]\n                },\n                callback: function(response) {\n                    if (response.message.length > 0) {\n                        let new_groups = response.message.map(group => group.name);\n\n                        // Add to master list\n                        all_groups.push(...new_groups);\n\n                        // Recursively fetch deeper levels\n                        fetchChildGroups(new_groups, callback);\n                    } else {\n                        callback();  // Call callback once recursion is complete\n                    }\n                }\n            });\n        }\n\n        // Start recursive fetching\n        fetchChildGroups(parent_groups, function() {\n            frm.set_query(\"item\", function() {\n                return {\n                    filters: [\n                        [\"Item\", \"item_group\", \"in\", all_groups]\n                    ]\n                };\n            });\n\n            console.log(\"Final Item Groups Applied:\", all_groups);\n        });\n    }\n});\n\n// frappe.ui.form.on('BOM', {\n//     onload: function(frm) {\n//         frappe.call({\n//             method: \"frappe.client.get_list\",\n//             args: {\n//                 doctype: \"Item Group\",\n//                 filters: [\n//                     [\"parent_item_group\", \"in\", [\"MP\", \"PM\", \"RM\"]]\n//                 ],\n//                 fields: [\"name\"]\n//             },\n//             callback: function(response) {\n//                 let groups = response.message.map(group => group.name);\n//                 groups.push(\"MP\", \"PM\", \"RM\");  // Include main groups too\n\n//                 frm.set_query(\"item\", function() {\n//                     return {\n//                         filters: [\n//                             [\"Item\", \"item_group\", \"in\", groups]\n//                         ]\n//                     };\n//                 });\n\n//                 console.log(\"Item filter applied with groups:\", groups);\n//             }\n//         });\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-03-10 16:51:57.608054",
  "module": "Mohan Impex",
  "name": "company_shipping_address",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    onload: function(frm) {\n        apply_address_filter(frm);\n    },\n    company: function(frm) {\n        apply_address_filter(frm);\n    }\n});\n\nfunction apply_address_filter(frm) {\n    let filters = {\n        is_your_company_address: 1,\n        link_doctype: \"Company\"\n    };\n\n    let company_name = frm.doc.company ? frm.doc.company : \"empty\"; // Handle empty company case\n\n    if (frm.doc.company) {\n        filters[\"link_name\"] = frm.doc.company;\n    } else {\n        filters[\"link_name\"] = \"\"; // Ensures empty filter when no company is selected\n    }\n\n    frm.set_query(\"custom_company_shipping_address\", function() {\n        return {\n            filters: filters\n        };\n    });\n\n    // Display applied filter as a message in the form\n    let filter_message = `Filters applied for <b>Is Your Company Address</b> = Yes, <b>Link Doctype</b> = Company, <b>Link Name</b> = ${company_name}`;\n    \n    // Show message in a section break instead of a pop-up\n    frm.fields_dict['custom_filter_message']?.$wrapper.html(`<div style=\"padding: 10px; background-color: #f5f5f5; border-radius: 5px;\">${filter_message}</div>`);\n}\n\n// Ensure there's a section in the form to show the filter message\nfrappe.ui.form.on('Request for Quotation', {\n    setup: function(frm) {\n        frm.add_custom_button(__('Show Applied Filters'), function() {\n            apply_address_filter(frm);\n        }).css({'background-color': '#007bff', 'color': '#fff'});\n    }\n});\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-04-18 13:16:35.896343",
  "module": "Mohan Impex",
  "name": "Company_Address",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    custom_company_shipping_address: function (frm) {\n        if (frm.doc.custom_company_shipping_address) {\n            fetch_address_details(frm);\n        } else {\n            frm.set_value(\"custom_shipping_address_details\", \"\"); // Clear if address is not selected\n        }\n\n        set_item_code_filter(frm);\n    },\n\n    refresh: function (frm) {\n        set_item_code_filter(frm);\n    }\n});\n\n// Fetch shipping address details and set formatted address\nfunction fetch_address_details(frm) {\n    frappe.call({\n        method: \"frappe.client.get\",\n        args: {\n            doctype: \"Address\",\n            name: frm.doc.custom_company_shipping_address\n        },\n        callback: function (r) {\n            if (r.message) {\n                const addr = r.message;\n                const formatted_address = [\n                    addr.address_line1,\n                    addr.address_line2,\n                    addr.city,\n                    addr.state,\n                    addr.pincode,\n                    addr.country\n                ].filter(Boolean).join(\"\\n\"); // Remove empty lines and format\n\n                frm.set_value(\"custom_shipping_address_details\", formatted_address);\n            } else {\n                frm.set_value(\"custom_shipping_address_details\", \"\");\n            }\n        }\n    });\n}\n\n// Apply filter on item_code field in items table\nfunction set_item_code_filter(frm) {\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function (doc, cdt, cdn) {\n        const row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-02-01 18:32:15.876683",
  "module": "Mohan Impex",
  "name": "State and City",
  "script": "frappe.ui.form.on('Lead', {\n // whenever \"state\" field is changed\n state(frm) {\n     frm.set_query(\"city\", (doc) => {\n         return {\n             filters: {\n                 \"state\": doc.state // whatever state is selected\n             }\n         }\n     });\n }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 0,
  "modified": "2025-02-01 18:48:38.590023",
  "module": "Mohan Impex",
  "name": "City Filter",
  "script": "frappe.ui.form.on(\"Lead\", {\n    city: function (frm) {\n        if (frm.doc.city) {\n            frappe.db.get_value(\"City\", frm.doc.city, \"city\", (r) => {\n                if (r && r.city) {\n                    frm.set_value(\"city\", r.city); // Set only the city name\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-02-08 11:46:13.530715",
  "module": "Mohan Impex",
  "name": "Lead: Others Source",
  "script": "frappe.ui.form.on('Lead', {\n    refresh: function (frm) {\n        // Ensure correct field visibility on form refresh\n        toggle_custom_specify_source(frm);\n    },\n    source: function (frm) {\n        // Trigger when the 'source' field changes\n        toggle_custom_specify_source(frm);\n    }\n});\n\n// Helper function to toggle the visibility of custom_specify_source\nfunction toggle_custom_specify_source(frm) {\n    frm.set_df_property('custom_specify_source', 'hidden', frm.doc.source === \"Other\" ? 0 : 1);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-04-17 12:54:24.661704",
  "module": "Mohan Impex",
  "name": "SO: Company Address",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        frm.set_query(\"company_address\", function() {\n            return {\n                filters: {\n                    \"address_type\": \"Billing\",\n                    \"is_your_company_address\": 1\n                }\n            };\n        });\n    }\n});\nfrappe.ui.form.on('Sales Order Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2025-02-08 17:22:11.862650",
  "module": "Mohan Impex",
  "name": "SO:Transporter",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        apply_transporter_filter(frm);\n    },\n\n    company: function(frm) {\n        // Reapply filter when Company is changed\n        apply_transporter_filter(frm);\n    }\n});\n\n// Function to apply dynamic filter\nfunction apply_transporter_filter(frm) {\n    frm.set_query('custom_transporter_name', function() {\n        return {\n            filters: {\n                'custom_company': frm.doc.company // Ensuring only suppliers linked with the selected company are shown\n            }\n        };\n    });\n\n    // Refresh the field to apply filter in real-time\n    frm.refresh_field('custom_transporter_name');\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Structure Assignment",
  "enabled": 0,
  "modified": "2025-02-11 16:06:59.131100",
  "module": "Mohan Impex",
  "name": "employee full name",
  "script": "frappe.ui.form.on('Salary Structure Assignment', {\n    employee: function(frm) {\n        if (frm.doc.employee) {\n            frappe.db.get_value('Employee', frm.doc.employee, 'employee_name', (r) => {\n                if (r && r.employee_name) {\n                    frm.set_value('employee', r.employee_name);\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2025-02-21 12:49:52.015955",
  "module": null,
  "name": "Script for Item Template",
  "script": "frappe.ui.form.on('Sales Order Item', {\n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Step 1: Fetch Item Templates\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Item\",\n                    filters: { \"variant_of\": \"\" },  // Fetch only Item Templates\n                    fields: [\"item_code\", \"item_name\"]\n                },\n                callback: function(response) {\n                    let templates = response.message.map(item => ({\n                        label: item.item_name, \n                        value: item.item_code\n                    }));\n\n                    // Prompt user to select an Item Template\n                    frappe.prompt([\n                        {\n                            label: \"Select Item Template\",\n                            fieldname: \"selected_template\",\n                            fieldtype: \"Select\",\n                            options: templates\n                        }\n                    ], (template_data) => {\n                        let selected_template = template_data.selected_template;\n                        fetch_variant_attributes(selected_template, frm, cdt, cdn);\n                    });\n                }\n            });\n        }\n    }\n});\n\n// Function to fetch attributes dynamically from the selected Item Template\nfunction fetch_variant_attributes(template, frm, cdt, cdn) {\n    frappe.call({\n        method: \"frappe.client.get\",\n        args: {\n            doctype: \"Item\",\n            name: template\n        },\n        callback: function(response) {\n            if (response.message) {\n                let item_template = response.message;\n                let attributes = item_template.attributes || [];\n\n                if (attributes.length > 0) {\n                    let attribute_list = attributes.map(attr => attr.attribute);\n                    iterate_attributes_selection(template, attribute_list, {}, frm, cdt, cdn);\n                } else {\n                    frappe.msgprint(\"No variant attributes found for this template.\");\n                }\n            }\n        }\n    });\n}\n\n// Function to iterate through each attribute selection\nfunction iterate_attributes_selection(template, attributes, selected_values, frm, cdt, cdn) {\n    if (attributes.length === 0) {\n        fetch_matching_variant(template, selected_values, frm, cdt, cdn);\n        return;\n    }\n\n    let current_attr = attributes.shift();\n\n    frappe.call({\n        method: \"frappe.client.get_list\",\n        args: {\n            doctype: \"Item Attribute Value\",\n            filters: { \"parent\": current_attr },\n            fields: [\"attribute_value\"]\n        },\n        callback: function(response) {\n            if (response.message.length > 0) {\n                let options = response.message.map(attr => ({\n                    label: attr.attribute_value,\n                    value: attr.attribute_value\n                }));\n\n                frappe.prompt([\n                    {\n                        label: `Select ${current_attr}`,\n                        fieldname: current_attr,\n                        fieldtype: \"Select\",\n                        options: options\n                    }\n                ], (data) => {\n                    selected_values[current_attr] = data[current_attr];\n                    iterate_attributes_selection(template, attributes, selected_values, frm, cdt, cdn);\n                });\n            } else {\n                frappe.msgprint(`No values found for attribute ${current_attr}`);\n            }\n        }\n    });\n}\n\n// Function to fetch final variant based on selected attributes\nfunction fetch_matching_variant(template, selected_values, frm, cdt, cdn) {\n    let filters = { \"variant_of\": template };\n    \n    // Add selected attribute values as filters\n    Object.keys(selected_values).forEach(attr => {\n        filters[`attribute_${attr.toLowerCase()}`] = selected_values[attr];\n    });\n\n    frappe.call({\n        method: \"frappe.client.get_list\",\n        args: {\n            doctype: \"Item\",\n            filters: filters,\n            fields: [\"item_code\", \"item_name\"]\n        },\n        callback: function(response) {\n            if (response.message.length === 1) {\n                // Auto-select the final variant\n                frappe.model.set_value(cdt, cdn, \"item_code\", response.message[0].item_code);\n            } else if (response.message.length > 1) {\n                // If multiple variants match, allow user to choose\n                let options = response.message.map(item => ({\n                    label: item.item_name,\n                    value: item.item_code\n                }));\n\n                frappe.prompt([\n                    {\n                        label: \"Select Final Variant\",\n                        fieldname: \"final_variant\",\n                        fieldtype: \"Select\",\n                        options: options\n                    }\n                ], (final_data) => {\n                    frappe.model.set_value(cdt, cdn, \"item_code\", final_data.final_variant);\n                });\n            } else {\n                frappe.msgprint(\"No matching variant found. Please check attribute selections.\");\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 0,
  "modified": "2025-03-10 14:38:41.374874",
  "module": "Mohan Impex",
  "name": "Role For Supplier",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n    refresh: function(frm) {\n        // Allow hiding only if the user is a \"Supplier\" and NOT a System Manager or similar privileged roles\n        if (frappe.user_roles.includes(\"Supplier\") && \n            !frappe.user_roles.includes(\"System Manager\") && \n            !frappe.user_roles.includes(\"Purchase User\") &&\n            !frappe.user_roles.includes(\"Accounts Manager\")) {\n            \n            // Hide the \"Taxes and Charges\" tab\n            frm.toggle_display('taxes', false);\n\n            // Hide \"Address & Contact\", \"Terms\", and \"Connections\" tabs\n            frm.toggle_display('address_and_contact_section', false);\n            frm.toggle_display('terms_section', false);\n            frm.toggle_display('connections_section', false);\n        }\n    }\n});\n\nfrappe.ui.form.on('Supplier Quotation', {\n    refresh: function(frm) {\n        // Allow hiding only if the user is a \"Supplier\" and NOT a System Manager or similar privileged roles\n        if (frappe.user_roles.includes(\"Supplier\") && \n            !frappe.user_roles.includes(\"System Manager\") && \n            !frappe.user_roles.includes(\"Purchase User\") &&\n            !frappe.user_roles.includes(\"Accounts Manager\")) {\n            \n            // Fields to Keep Visible\n            let visible_fields = [\"item_code\", \"qty\", \"uom\", \"rate\", \"amount\"];\n\n            // Loop through all fields in Items table and hide the ones not in visible_fields\n            $.each(frm.fields_dict[\"items\"].grid.fields_map, function (fieldname, field) {\n                if (visible_fields.includes(fieldname)) {\n                    frm.set_df_property(fieldname, 'hidden', false);  // Show field\n                } else {\n                    frm.set_df_property(fieldname, 'hidden', true);   // Hide field\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-03-19 11:58:58.486815",
  "module": "Mohan Impex",
  "name": "Create ASN",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        // Remove existing custom button if any\n        frm.remove_custom_button('Create ASN');\n\n        // Check if Acceptance Status is 'Accept' before adding the button\n        if (frm.doc.custom_acceptance_status === \"Accept\") {\n            frm.add_custom_button('Create ASN', function() {\n                frappe.call({\n                    method: \"frappe.client.insert\",\n                    args: {\n                        doc: {\n                            doctype: \"Advance Supplier Notification\",\n                            purchase_order: frm.doc.name,\n                            supplier: frm.doc.supplier,\n                            items: frm.doc.items.map(item => ({\n                                item: item.item_code,\n                                qty: item.qty,\n                                doctype: \"ASN Item\"\n                            }))\n                        }\n                    },\n                    callback: function(response) {\n                        if (response.message) {\n                            frappe.set_route(\"Form\", \"Advance Supplier Notification\", response.message.name);\n                        }\n                    }\n                });\n            });\n        }\n    }\n});\n\n\n\n\n// frappe.ui.form.on('Purchase Order', {\n//     refresh: function(frm) {\n//         frm.remove_custom_button('Create ASN');\n\n//         if (frm.doc.custom_acceptance_status === \"Accept\") {\n//             frm.add_custom_button('Create ASN', function() {\n//                 frappe.new_doc('Advance Supplier Notification', {\n//                     purchase_order: frm.doc.name,\n//                     supplier: frm.doc.supplier\n//                 });\n//             });\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-03-11 12:04:24.079612",
  "module": "Mohan Impex",
  "name": "Acceptance Status",
  "script": "// frappe.ui.form.on('Purchase Order', {\n//     setup: function (frm) {\n//         frm.set_df_property('custom_acceptance_status', 'read_only', 1);\n//     }\n// });\n\nfrappe.ui.form.on('Purchase Order', {\n    refresh: function (frm) {\n        // Define the roles that should have read-only access\n        let readOnlyRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        // Check if the user has any of the roles in the readOnlyRoles list\n        let isReadOnly = frappe.user_roles.some(role => readOnlyRoles.includes(role));\n\n        // Set the field property accordingly\n        frm.set_df_property('custom_acceptance_status', 'read_only', isReadOnly ? 1 : 0);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-05-26 14:57:32.499340",
  "module": null,
  "name": "Supplier Rfq",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    onload: function (frm) {\n        const allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        const hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        const fieldsToToggle = [\n            'suppliers',\n            'message_for_supplier',\n            'email_template',\n            'send_attached_files',\n            'send_document_print'\n        ];\n\n        fieldsToToggle.forEach(field => {\n            frm.set_df_property(field, 'hidden', !hasAccess);\n        });\n    },\n\n    refresh: function (frm) {\n        const allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        const hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if (!hasAccess) {\n            // Wait for the menu DOM to be ready before hiding\n            frm.remove_custom_button(__('Send Emails to Suppliers'), __('Tools'));\n            frm.remove_custom_button(__('Download PDF'), __('Tools'));\n\n            \n\n            frappe.after_ajax(() => {\n                $('.menu-btn-group').hide();\n            });\n        }\n        if (frm.doc.custom_rfq_actual_status === 'Closed') {\n            frm.remove_custom_button(__('Supplier Quotation'), __('Create'));\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2025-03-22 13:20:57.690131",
  "module": null,
  "name": "RFQ filter Supplier wise",
  "script": "frappe.listview_settings['Request for Quotation'] = {\n    onload: function(listview) {\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Supplier\",\n                fields: [\"name\"],\n                limit_page_length: 1, // Fetch only the first supplier\n                order_by: \"name asc\" // Sort by name to ensure consistency\n            },\n            callback: function(response) {\n                if (response.message && response.message.length > 0) {\n                    let first_supplier = response.message[0].name;\n                    frappe.set_route(\"List\", \"Request for Quotation\", { \n                        \"supplier\": [\"=\", first_supplier]\n                    });\n                }\n            }\n        });\n    }\n};\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2025-03-25 10:59:58.882220",
  "module": null,
  "name": "Supplier Filter",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    setup: function(frm) {\n        // Define allowed roles\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        // Check if the current user has access\n        let hasAccess = allowedRoles.some(role => frappe.user.has_role(role));\n\n        if (!hasAccess) {\n            // Call backend to get supplier linked to current user\n            frappe.call({\n                method: \"mohan_impex.user_roles.get_supplier_for_user\",\n                args: {\n                    user: frappe.session.user\n                },\n                callback: function(response) {\n                    let supplier_name = response.message;\n\n                    if (supplier_name) {\n                        // Redirect to the filtered list view using the supplier\n                        frappe.set_route(\"List\", \"Request for Quotation\", {\n                            \"Request for Quotation Supplier.supplier\": supplier_name\n                        });\n                    } else {\n                        frappe.msgprint({\n                            title: __('Warning'),\n                            message: __('No supplier is linked to your user account.'),\n                            indicator: 'orange'\n                        });\n                    }\n                }\n            });\n        }\n    }\n});\n\n\n\n// frappe.ui.form.on('Request for Quotation', {\n//     setup: function(frm) {\n//         // Define allowed roles\n//         let allowedRoles = [\n//             \"Administrator\", \n//             \"Purchase Executive\", \n//             \"Purchase Manager\", \n//             \"Purchase Master Manager\", \n//             \"Purchase User\", \n//             \"SCM Manager\"\n//         ];\n\n//         // Check if the current user has access\n//         let hasAccess = allowedRoles.some(role => frappe.user.has_role(role));\n\n//         if (!hasAccess) {\n//             // Ensure the suppliers field exists and has data\n//             if (Array.isArray(frm.doc.suppliers) && frm.doc.suppliers.length > 0) {\n//                 let supplier_name = frm.doc.suppliers[0].supplier;\n\n//                 // Redirect to the filtered Request for Quotation list view\n//                 frappe.set_route(\"List\", \"Request for Quotation\", { supplier: supplier_name });\n\n//             } else {\n//                 // Show a warning if no supplier is found\n//                 frappe.msgprint({\n//                     title: __('Warning'),\n//                     message: __('No supplier found in this Request for Quotation'),\n//                     indicator: 'orange'\n//                 });\n//             }\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-04-18 13:29:56.566741",
  "module": null,
  "name": "Button Hide : SQ",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n    refresh(frm) {\n        // Wait a bit to ensure buttons are loaded\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if(!hasAccess){\n            setTimeout(() => {\n            frm.remove_custom_button(__('Purchase Order'), __('Create'));\n            frm.remove_custom_button(__('Quotation'), __('Create'));\n            frm.remove_custom_button(__('Material Request'), __('Get Items From'));\n            frm.remove_custom_button(__('Request for Quotation'), __('Get Items From'));\n            frm.remove_custom_button(__('Link to Material Requests'), __('Tools'));\n            $(\".menu-btn-group\").hide();\n        }, 500);\n        }\n        set_item_code_filter(frm)\n    }\n});\n\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Template test",
  "enabled": 1,
  "modified": "2025-03-13 10:59:40.204060",
  "module": "Mohan Impex",
  "name": "Item Template test",
  "script": "frappe.ui.form.on('Item Template Test', {\n    refresh: function(frm) {\n        // Filter item_template to show only items that have variants\n        frm.set_query(\"item_template\", function() {\n            return {\n                filters: {\n                    \"has_variants\": 1\n                }\n            };\n        });\n    },\n\n    item_template: function(frm) {\n        // Reset child table when template changes\n        frm.clear_table(\"items\");\n        frm.refresh_field(\"items\");\n    }\n});\n\n// Apply filtering inside child table dynamically\nfrappe.ui.form.on('Item Template Test Item', {\n    item_template: function(frm, cdt, cdn) {\n        var row = locals[cdt][cdn];\n\n        // Reset item_code when template changes\n        frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n\n        // Apply filter for item_code to show only variants of selected item_template\n        frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"variant_of\": row.item_template\n                }\n            };\n        };\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "GRN 2",
  "enabled": 1,
  "modified": "2025-03-20 15:26:07.119266",
  "module": "Mohan Impex",
  "name": "GRN 2 Documents",
  "script": "frappe.ui.form.on('GRN 2', {\n    refresh: function(frm) {\n        // Ensure rows are added only when creating a new document and the child table is empty\n        if (frm.is_new() && (!frm.doc.documents || frm.doc.documents.length === 0)) {\n            let default_documents = [];\n\n            if (frm.doc.type === \"Domestic\") {\n                default_documents = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"External Test Report\", \"Additional Documents\"];\n            } else if (frm.doc.type === \"Import\") {\n                default_documents = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"Halal Certificate (For Export)\", \"Kosher Certificate (For Export)\", \"External Test Report\", \"Additional Documents\"];\n            }\n\n            // Add rows based on the selected type\n            default_documents.forEach((doc_name) => {\n                let row = frm.add_child('documents');\n                row.document_name = doc_name;\n            });\n\n            frm.refresh_field('documents'); // Refresh the child table UI\n        }\n    }\n});\n\n\n\n// frappe.ui.form.on('GRN 2', {\n//     refresh: function(frm) {\n//         // Ensure rows are added only when creating a new document and the child table is empty\n//         if (frm.is_new() && (!frm.doc.documents || frm.doc.documents.length === 0)) {\n//             let default_documents = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"Halal Certificate (For Export)\", \"Kosher Certificate (For Export)\",\"External Test Report\",\"Additional Documents\"];\n            \n//             // Add 5 rows with predefined document_name values\n//             default_documents.forEach((doc_name) => {\n//                 let row = frm.add_child('documents');\n//                 row.document_name = doc_name;  // Assign different document names\n//             });\n\n//             frm.refresh_field('documents'); // Refresh the child table UI\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-03-22 12:26:56.917457",
  "module": null,
  "name": "HIde Filter:RFQ",
  "script": "frappe.listview_settings['Request for Quotation'] = {\n    onload: function(listview) {\n        \n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n        \n        if(!hasAccess){\n            frappe.after_ajax(() => {\n            $('.filter-selector').hide();\n            $('.dropdown-menu').hide();\n            $(\".menu-btn-group\").hide();\n        });\n        }\n        \n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2025-03-25 13:11:39.980907",
  "module": "Mohan Impex",
  "name": "Create GRN 2",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) {  // Check if docstatus is 1 (Submitted)\n            frm.add_custom_button(__('Create GRN 2'), function() {\n                frappe.model.with_doctype('GRN 2', function() {\n                    let new_doc = frappe.model.get_new_doc('GRN 2');\n                    new_doc.purchase_receipt = frm.doc.name;\n                    new_doc.type = frm.doc.custom_type;\n                    new_doc.invoice_no = frm.doc.custom_invoice_no;\n                    new_doc.invoice_date = frm.doc.custom_invoice_date;\n\n                    frappe.set_route('Form', 'GRN 2', new_doc.name);\n                });\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "GRN 2",
  "enabled": 1,
  "modified": "2025-03-20 15:11:20.105996",
  "module": "Mohan Impex",
  "name": "Create GRN2 from PR",
  "script": "frappe.ui.form.on('GRN 2', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Purchase Receipt'), function() {\n            frappe.prompt([\n                {\n                    label: 'Purchase Receipt',\n                    fieldname: 'name',\n                    fieldtype: 'Link',\n                    options: 'Purchase Receipt',\n                    reqd: 1\n                }\n            ],\n            function(data) {\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Purchase Receipt',\n                        name: data.name  // Corrected field reference\n                    },\n                    freeze: true,\n                    freeze_message: __('Fetching details...'),\n                    callback: function(response) {\n                        if (response.exc) {\n                            return;\n                        }\n\n                        let pr = response.message;\n                        if (pr) {\n                            frm.set_value('purchase_receipt', pr.name);\n                            frm.set_value('type', pr.custom_type);\n                            if (pr.custom_invoice_no) {\n                                frm.set_value('invoice_no', pr.custom_invoice_no);\n                            }\n                            if (pr.custom_invoice_date) {\n                                frm.set_value('invoice_date', pr.custom_invoice_date);\n                            }\n                            \n                        }\n                    }\n                });\n            }, \n            __('Select Purchase Receipt'), \n            __('Add'));\n        }, __('Get Details From')).addClass('btn-primary'); // Add primary color styling\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pre-Unloading Check",
  "enabled": 1,
  "modified": "2025-05-29 17:38:54.008934",
  "module": "Mohan Impex",
  "name": "Lobour Cost Calculation",
  "script": "frappe.ui.form.on('Pre-Unloading Check', {\n    labour_rate_per_ton: function(frm) {\n        calculate_labour_cost(frm);\n    },\n    total_quantity: function(frm) {\n        calculate_labour_cost(frm);\n    }\n});\n\nfunction calculate_labour_cost(frm) {\n    let rate = flt(frm.doc.labour_rate_per_ton || 0); \n    let qty = flt(frm.doc.total_quantity || 0); \n    let total = (rate * qty)/1000;\n    frm.set_value('total_labour_cost', total);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch",
  "enabled": 1,
  "modified": "2025-03-18 12:40:42.440283",
  "module": null,
  "name": "Auto Update Brand Item When Batch Is Created",
  "script": "frappe.ui.form.on(\"Batch\", {\n    after_save: function(frm) {\n        if (frm.doc.item && frm.doc.custom_brand) {  // Ensure Item & Brand exist before updating\n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Item\",\n                    name: frm.doc.item,   // The linked Item to be updated\n                    fieldname: \"brand\",   // The field in Item Doctype\n                    value: frm.doc.custom_brand  // The value from Batch Doctype\n                },\n                callback: function(response) {\n                    if (!response.exc) {\n                        frappe.msgprint(__(\"Brand has been updated in the Item successfully!\"));\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2025-03-22 00:39:30.302132",
  "module": null,
  "name": "GRN 1 Item",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    setup: function(frm) {\n        if (!frm.is_new()) {\n            // Auto-fetch data if needed on form refresh\n            fetch_item_details(frm);\n        }\n    }\n});\n\n// When the main items table is updated\nfrappe.ui.form.on('Purchase Receipt Item', {\n    item_code: function(frm, cdt, cdn) {\n        fetch_item_details(frm);\n    }\n});\n\nfunction fetch_item_details(frm) {\n    frm.clear_table('custom_item_details'); // Clear old data\n    $.each(frm.doc.items || [], function(i, row) {\n        let new_row = frm.add_child('custom_item_details');\n        new_row.item_code = row.item_code;\n        new_row.item_name = row.item_name;\n        new_row.description = row.description;\n        new_row.qty = row.qty;\n        new_row.unit_price = row.rate;\n        new_row.amount = row.amount;\n    });\n    frm.refresh_field('custom_item_details'); // Refresh child table\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "GRN 2",
  "enabled": 1,
  "modified": "2025-03-20 15:54:16.433374",
  "module": "Mohan Impex",
  "name": "Status Color GRN 2",
  "script": "frappe.listview_settings['GRN 2'] = {\n    add_fields: [\"type\"],  // Ensure field is available in list view\n    get_indicator: function(doc) {\n        if (doc.type === \"Domestic\") {\n            return [__(\"Domestic\"), \"green\", \"custom_type,=,Domestic\"];\n        } else if (doc.type === \"Import\") {\n            return [__(\"Import\"), \"yellow\", \"custom_type,=,Import\"];\n        }\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pre-Unloading Check",
  "enabled": 1,
  "modified": "2025-03-21 01:36:14.507059",
  "module": null,
  "name": "Labour Cost",
  "script": "frappe.ui.form.on('Pre-Unloading Check', {\n    on_submit: function(frm) {\n        if (frm.doc.purchase_order) {\n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Purchase Order\",\n                    name: frm.doc.purchase_order,\n                    fieldname: {\n                        \"custom_total_labour_cost\": frm.doc.total_labour_cost\n                    }\n                },\n                callback: function(response) {\n                    if (!response.exc) {\n                        frappe.msgprint(__('Total Labour Cost updated in Purchase Order: ' + frm.doc.purchase_order));\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2025-03-25 13:08:44.791786",
  "module": null,
  "name": "Labour Cost : Purchase Receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    on_submit: function(frm) {\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            let purchase_order = frm.doc.items[0].purchase_order; // Get linked PO from first item\n            \n            if (purchase_order) {\n                frappe.call({\n                    method: \"frappe.client.get_value\",\n                    args: {\n                        doctype: \"Purchase Order\",\n                        filters: {\n                            name: purchase_order\n                        },\n                        fieldname: \"custom_total_labour_cost\"\n                    },\n                    callback: function(response) {\n                        if (response.message) {\n                            let total_labour_cost = response.message.custom_total_labour_cost || 0;\n\n                            frappe.call({\n                                method: \"frappe.client.set_value\",\n                                args: {\n                                    doctype: \"Purchase Receipt\",\n                                    name: frm.doc.name,\n                                    fieldname: {\n                                        \"custom_total_labour_cost\": total_labour_cost\n                                    }\n                                },\n                                callback: function(update_response) {\n                                    if (!update_response.exc) {\n                                        frappe.msgprint(__('Total Labour Cost updated in Purchase Receipt from Purchase Order: ' + total_labour_cost));\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n            } else {\n                frappe.msgprint(__('No linked Purchase Order found for this Purchase Receipt.'));\n            }\n        }\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function(frm) {\n        if (frm.doc.name) {\n            frappe.call({\n                method: \"mohan_impex.PR_Connection.get_linked_purchase_order\",  // API method path\n                args: { purchase_receipt: frm.doc.name },\n                callback: function(response) {\n                    if (response.message && typeof response.message === \"string\") {\n                        let purchase_order = response.message;\n                        console.log(\"Linked Purchase Order:\", purchase_order);\n\n                        let custom_type = '';\n                        if (purchase_order.startsWith(\"IMP\")) {\n                            custom_type = 'Import';\n                        } else if (purchase_order.startsWith(\"DOM\")) {\n                            custom_type = 'Domestic';\n                        }\n\n                        frm.set_value('custom_type', custom_type);\n                        frm.refresh_field('custom_type');  // Ensure UI updates\n                    } else {\n                        console.warn(\"No linked Purchase Order found.\");\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Landed Cost Voucher",
  "enabled": 1,
  "modified": "2025-03-21 02:46:15.373660",
  "module": null,
  "name": "Labour Cost: LCV",
  "script": "frappe.ui.form.on('Landed Cost Voucher', {\n    purchase_receipts_add: function(frm, cdt, cdn) {\n        update_labour_cost(frm);\n    },\n    purchase_receipts_remove: function(frm, cdt, cdn) {\n        update_labour_cost(frm);\n    },\n    refresh: function(frm) {\n        update_labour_cost(frm);\n    }\n});\n\nfunction update_labour_cost(frm) {\n    if (frm.doc.purchase_receipts && frm.doc.purchase_receipts.length > 0) {\n        let receipt_document_type = frm.doc.purchase_receipts[0].receipt_document_type;\n        let receipt_document = frm.doc.purchase_receipts[0].receipt_document;\n\n        // Ensure it is a Purchase Receipt\n        if (receipt_document_type === 'Purchase Receipt' && receipt_document) {\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Purchase Receipt\",\n                    filters: { name: receipt_document },\n                    fieldname: \"custom_total_labour_cost\"\n                },\n                callback: function(response) {\n                    if (response.message) {\n                        let total_labour_cost = response.message.custom_total_labour_cost || 0;\n\n                        // Ensure at least one row exists in the Taxes and Charges table\n                        if (!frm.doc.taxes || frm.doc.taxes.length === 0) {\n                            let row = frm.add_child(\"taxes\");\n                            row.description = \"Labour Cost\";\n                            row.amount = total_labour_cost;\n                        } else {\n                            frm.doc.taxes[0].description = \"Labour Cost\";\n                            frm.doc.taxes[0].amount = total_labour_cost;\n                        }\n\n                        frm.refresh_field(\"taxes\");\n                        frappe.msgprint(__('Labour Cost updated from Purchase Receipt: ' + receipt_document));\n                    }\n                }\n            });\n        }\n    }\n}\n\n\n// frappe.ui.form.on('Landed Cost Voucher', {\n//     on_submit: function(frm) {\n//         let receipt_document_type = cur_frm.doc.purchase_receipts[0].receipt_document_type;\n//         let receipt_document = cur_frm.doc.purchase_receipts[0].receipt_document;\n\n//         // Ensure it is a Purchase Receipt\n//         if (receipt_document_type === 'Purchase Receipt' && receipt_document) {\n//             frappe.call({\n//                 method: \"frappe.client.get_value\",\n//                 args: {\n//                     doctype: \"Purchase Receipt\",\n//                     filters: {\n//                         name: receipt_document\n//                     },\n//                     fieldname: \"custom_total_labour_cost\"\n//                 },\n//                 callback: function(response) {\n//                     if (response.message) {\n//                         let total_labour_cost = response.message.custom_total_labour_cost || 0;\n\n//                         // Ensure at least one row exists in the Taxes and Charges table\n//                         if (frm.doc.taxes.length === 0) {\n//                             let row = frm.add_child(\"taxes\");\n//                             row.description = \"Labour Cost\";\n//                             row.amount = total_labour_cost; \n//                         } else {\n//                             frm.doc.taxes[0].description = \"Labour Cost\";\n//                             frm.doc.taxes[0].amount = total_labour_cost; \n//                         }\n\n//                         frm.refresh_field(\"taxes\");\n//                         frappe.msgprint(__('Labour Cost updated from Purchase Receipt: ' + receipt_document));\n//                     }\n//                 }\n//             });\n//         } else {\n//             frappe.msgprint(__('No valid Purchase Receipt found in Landed Cost Voucher.'));\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch",
  "enabled": 1,
  "modified": "2025-03-21 13:52:04.560244",
  "module": "Mohan Impex",
  "name": "Brand Filter in Batch",
  "script": "frappe.ui.form.on('Batch', {\n    item: function(frm) {\n        if (!frm.doc.item) {\n            frm.set_df_property('custom_brand', 'options', []);\n            frm.refresh_field('custom_brand');\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: frm.doc.item\n            },\n            callback: function(r) {\n                if (r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(row => row.brand_item);\n                    \n                    // Set the options dynamically if custom_brand is a Select field\n                    if (frm.fields_dict.custom_brand.df.fieldtype === \"Select\") {\n                        frm.set_df_property(\"custom_brand\", \"options\", [\"\"].concat(brand_options));\n                        frm.refresh_field(\"custom_brand\");\n                    }\n\n                    // If it's a Link field, use a custom query\n                    if (frm.fields_dict.custom_brand.df.fieldtype === \"Link\") {\n                        frm.set_query(\"custom_brand\", function() {\n                            return {\n                                filters: [\n                                    [\"Brand\", \"name\", \"in\", brand_options]\n                                ]\n                            };\n                        });\n                    }\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2025-03-25 14:25:56.269030",
  "module": null,
  "name": "SO: Account Team Approval",
  "script": "frappe.ui.form.on(\"Sales Order\", {\n    customer: function(frm) {\n        // Reset approval status while balance is being checked\n        frm.set_value(\"custom_accounts_approval_status\", \"\");\n\n        if (frm.doc.company && frm.doc.customer) {\n            frappe.call({\n                method: \"erpnext.accounts.utils.get_balance_on\",\n                args: {\n                    party_type: \"Customer\",\n                    party: frm.doc.customer,\n                    company: frm.doc.company\n                },\n                callback: function(r) {\n                    if (!r.exc && r.message != null) {\n                        const balance = r.message;\n\n                        if (balance > 0) {\n                            frm.set_value(\"custom_accounts_approval_status\", \"Pending\");\n                            frappe.msgprint({\n                                title: __(\"Outstanding Balance Alert\"),\n                                message: __(\"Customer has an outstanding balance of {0}. Approval from the Accounts team is required to proceed.\",\n                                    [frappe.format(balance, { fieldtype: \"Currency\" })]),\n                                indicator: \"red\"\n                            });\n                        } else {\n                            frm.set_value(\"custom_accounts_approval_status\", \"Approved\");\n                        }\n                    } else {\n                        frappe.msgprint({\n                            title: __(\"Error\"),\n                            message: __(\"Could not fetch customer balance. Please try again.\"),\n                            indicator: \"red\"\n                        });\n                        console.error(\"Balance fetch error:\", r);\n                    }\n                }\n            });\n        }\n    },\n\n    before_submit: function(frm) {\n        const status = frm.doc.custom_accounts_approval_status;\n\n        if (!status || [\"Pending\", \"Rejected\"].includes(status)) {\n            frappe.throw(__(\"This Sales Order cannot be submitted. Approval Status is '{0}'. Please get approval from the Accounts team.\", [status || \"Not Set\"]));\n        }\n    }\n});\n\n\n// Actual Quantity in Ware hosue\nfrappe.ui.form.on('Sales Order Item', {\n    item_code: function(frm, cdt, cdn) {\n        update_available_quantity(frm, cdt, cdn);\n    },\n    warehouse: function(frm, cdt, cdn) {\n        update_available_quantity(frm, cdt, cdn);\n    }\n});\n\nfunction update_available_quantity(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    if (row.item_code && row.warehouse) {\n        frappe.call({\n            method: \"mohan_impex.Sales.available_stock.get_item_stock\", // your custom API path\n            args: {\n                item_code: row.item_code,\n                warehouse: row.warehouse\n            },\n            callback: function(r) {\n                if (r.message) {\n                    frappe.model.set_value(cdt, cdn, \"available_quantity\", r.message.actual_qty);\n                } else {\n                    frappe.model.set_value(cdt, cdn, \"available_quantity\", 0);\n                }\n            }\n        });\n    }\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-04-18 13:32:20.157346",
  "module": "Mohan Impex",
  "name": "Hide Button :PO",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh(frm) {\n        // Wait a bit to ensure buttons are loaded\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if(!hasAccess){\n            setTimeout(() => {\n            frm.remove_custom_button('Update Items');\n            frm.remove_custom_button(__('Purchase Receipt'), __('Create'));\n            frm.remove_custom_button(__('Purchase Invoice'), __('Create'));\n            frm.remove_custom_button(__('Payment'), __('Create'));\n            frm.remove_custom_button(__('Payment Request'), __('Create'));\n            frm.remove_custom_button(__('Hold'), __('Status'));\n            frm.remove_custom_button(__('Close'), __('Status'))\n            $(\".menu-btn-group\").hide();\n        }, 500);\n        }\n        set_item_code_filter(frm)\n    }\n});\nfrappe.ui.form.on('Purchase Order Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-03-22 12:09:31.022508",
  "module": null,
  "name": "Hide Filter in  PO",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    onload: function(listview) {\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if (!hasAccess) {\n            frappe.after_ajax(() => {\n                // Hide full filter bar\n                $('.filter-selector').hide();\n\n                // Hide specific standard filters (if visible)\n                $(\".menu-btn-group\").hide();\n                if (listview.page.fields_dict.company)\n                    listview.page.fields_dict.company.$wrapper.hide();\n                if (listview.page.fields_dict.supplier)\n                    listview.page.fields_dict.supplier.$wrapper.hide();\n                if (listview.page.fields_dict.supplier_name)\n                    listview.page.fields_dict.supplier_name.$wrapper.hide();\n                if (listview.page.fields_dict.status)\n                    listview.page.fields_dict.status.$wrapper.hide();\n\n                // Hide Help Toggle\n                $('.dropdown-menu').hide();\n            });\n        }\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-03-22 15:27:22.792483",
  "module": null,
  "name": "Hide Filter in SQ",
  "script": "frappe.listview_settings['Supplier Quotation'] = {\n    onload: function(listview) {\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n        if (!hasAccess) {\n            frappe.after_ajax(() => {\n                // Hide full filter bar\n                $('.filter-selector').hide();\n\n                // Hide specific standard filters (if visible)\n                $(\".menu-btn-group\").hide();\n                if (listview.page.fields_dict.company)\n                    listview.page.fields_dict.company.$wrapper.hide();\n                if (listview.page.fields_dict.supplier)\n                    listview.page.fields_dict.supplier.$wrapper.hide();\n                if (listview.page.fields_dict.title)\n                    listview.page.fields_dict.title.$wrapper.hide();\n                    \n                listview.page.wrapper.find('.btn-primary').hide();\n\n                $('.dropdown-menu').hide();\n            });\n        }\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 0,
  "modified": "2025-03-22 15:17:04.506636",
  "module": null,
  "name": "Rate Supplier Quotation",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n    onload: function(frm) {\n        let allowedRoles = [\n            \"Administrator\", \n            \"Purchase Executive\", \n            \"Purchase Manager\", \n            \"Purchase Master Manager\", \n            \"Purchase User\", \n            \"SCM Manager\"\n        ];\n\n        let hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n        \n       if(!hasAccess){\n            frm.doc.items.forEach(item => {\n            item.rate = 0;\n            item.amount = 0;\n        });\n       }\n        frm.refresh_field('items');  // Refresh to reflect changes on the UI\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2025-04-18 13:05:07.225486",
  "module": "Mohan Impex",
  "name": "Select Brand : M Req",
  "script": "frappe.ui.form.on('Material Request Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\nfrappe.ui.form.on(\"Material Request\", {\n    refresh(frm){\n        set_item_code_filter(frm)\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-04-17 12:08:05.995310",
  "module": "Mohan Impex",
  "name": "Item Supplier RFQ",
  "script": "frappe.ui.form.on(\"Request for Quotation\", {\n    refresh: function(frm) {\n        if(frm.doc.docstatus == 0){\n            frm.add_custom_button(\"Fetch Suppliers\", function() {\n            frm.trigger(\"set_suppliers_from_items\");\n        });\n        }\n    },\n\n    set_suppliers_from_items: function(frm) {\n        let items = frm.doc.items || [];\n\n        items.forEach(row => {\n            if (row.item_code) {\n                frappe.call({\n                    method: \"mohan_impex.supplier_item.get_suppliers_by_item\",\n                    args: { item_name: row.item_code },\n                    callback: function(response) {\n                        if (response.message && response.message.suppliers.length > 0) {\n                            let suppliers = response.message.suppliers;\n                            let existing_suppliers = frm.doc.suppliers.map(s => s.supplier);\n\n                            // Clean up the empty row if it exists\n                            if (frm.doc.suppliers.length === 1 && !frm.doc.suppliers[0].supplier) {\n                                frm.doc.suppliers = [];\n                            }\n\n                            suppliers.forEach(supplier => {\n                                if (!existing_suppliers.includes(supplier)) {\n                                    let child = frm.add_child(\"suppliers\");\n                                    child.supplier = supplier;\n                                }\n                            });\n\n                            frm.refresh_field(\"suppliers\");\n                        }\n                    }\n                });\n            }\n        });\n    }\n});\n\nfrappe.ui.form.on('Request for Quotation Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2025-03-24 12:11:20.037243",
  "module": null,
  "name": "Read only : RFQ",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    onload: function(frm) {\n        frm.fields_dict['suppliers'].grid.wrapper.find('.grid-add-row, .grid-remove-rows').hide();\n        frm.fields_dict['suppliers'].grid.wrapper.find('.grid-row-check').hide();\n        frm.fields_dict['suppliers'].grid.wrapper.find('.row-index, .grid-row-delete, .grid-row-move').hide();\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 1,
  "modified": "2025-03-24 14:20:26.550019",
  "module": null,
  "name": "Unclick able",
  "script": "frappe.ui.form.on('Supplier Quotation', {\n    onload: function(frm) {\n        // Wait for field to render\n        setTimeout(() => {\n            // Disable link navigation\n            frm.fields_dict['supplier'].$wrapper.find('a').on('click', function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n                return false;\n            });\n        }, 100);\n    }\n});\n\n\n// function disableLinkField(frm, fieldname) {\n//     frm.fields_dict[fieldname].$wrapper.find('a').on('click', function(e) {\n//         e.preventDefault();\n//         e.stopPropagation();\n//         return false;\n//     });\n// }\n\n// function disableItemCodeLinks(row) {\n//     row.grid_form.fields_dict.item_code.$wrapper.find('a').on('click', function(e) {\n//         e.preventDefault();\n//         e.stopPropagation();\n//         return false;\n//     });\n// }\n\n// frappe.ui.form.on('Supplier Quotation', {\n//     onload: function(frm) {\n//         const allowedRoles = [\n//             \"Administrator\", \n//             \"Purchase Executive\", \n//             \"Purchase Manager\", \n//             \"Purchase Master Manager\", \n//             \"Purchase User\", \n//             \"SCM Manager\"\n//         ];\n\n//         const hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n//         if (!hasAccess) {\n//             disableLinkField(frm, 'supplier');\n//             disableLinkField(frm, 'company');\n//         }\n//     },\n\n//     items_on_form_rendered: function(frm, gridRow) {\n//         const allowedRoles = [\n//             \"Administrator\", \n//             \"Purchase Executive\", \n//             \"Purchase Manager\", \n//             \"Purchase Master Manager\", \n//             \"Purchase User\", \n//             \"SCM Manager\"\n//         ];\n\n//         const hasAccess = frappe.user_roles.some(role => allowedRoles.includes(role));\n\n//         if (!hasAccess && gridRow && gridRow.grid_form) {\n//             disableItemCodeLinks(gridRow);\n//         }\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2025-03-25 10:53:17.149244",
  "module": "Mohan Impex",
  "name": "Auto Supplier Selection",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    onload_post_render(frm) {\n        if (frm.doc.__islocal) return;\n\n        frm.dashboard.add_transactions = function () {\n            frm.dashboard.add_transaction({\n                items: [\n                    {\n                        label: 'Supplier Quotation',\n                        doctype: 'Supplier Quotation',\n                        on_click: () => {\n                            const doc = frm.doc;\n\n                            // Fetch supplier linked to current user\n                            frappe.call({\n                                method: \"mohan_impex.user_roles.get_supplier_for_user\",\n                                args: { user: frappe.session.user },\n                                callback(res) {\n                                    const linked_supplier = res.message;\n\n                                    if (!linked_supplier) {\n                                        frappe.msgprint(__('You are not linked to any Supplier.'));\n                                        return;\n                                    }\n\n                                    const suppliers = (doc.suppliers || []).map(row => row.supplier);\n\n                                    if (!suppliers.includes(linked_supplier)) {\n                                        frappe.msgprint(__('You are not one of the suppliers invited for this RFQ.'));\n                                        return;\n                                    }\n\n                                    // Create dialog\n                                    const dialog = new frappe.ui.Dialog({\n                                        title: __(\"Create Supplier Quotation\"),\n                                        fields: [\n                                            {\n                                                fieldtype: \"Link\",\n                                                label: __(\"Supplier\"),\n                                                fieldname: \"supplier\",\n                                                options: \"Supplier\",\n                                                reqd: 1\n                                            }\n                                        ],\n                                        primary_action_label: __(\"Create\"),\n                                        primary_action(values) {\n                                            frappe.call({\n                                                method: \"erpnext.buying.doctype.request_for_quotation.request_for_quotation.make_supplier_quotation\",\n                                                args: {\n                                                    source_name: doc.name,\n                                                    supplier: values.supplier\n                                                },\n                                                callback(res) {\n                                                    if (!res.exc && res.message) {\n                                                        frappe.set_route(\"Form\", res.message.doctype, res.message.name);\n                                                    }\n                                                }\n                                            });\n                                            dialog.hide();\n                                        }\n                                    });\n\n                                    dialog.show();\n\n                                    // Set the supplier value after showing dialog\n                                    dialog.set_value(\"supplier\", linked_supplier);\n\n                                    // Optional: Make it read-only\n                                    dialog.fields_dict.supplier.df.read_only = 1;\n                                    dialog.fields_dict.supplier.refresh();\n                                }\n                            });\n                        }\n                    }\n                ]\n            });\n        };\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-04-17 12:27:07.008265",
  "module": "Mohan Impex",
  "name": "Lead Days",
  "script": "frappe.ui.form.on(\"Purchase Order Item\", {\n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        let supplier = frm.doc.supplier;\n\n        if (supplier && row.item_code) {\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Item\",\n                    name: row.item_code\n                },\n                callback: function(r) {\n                    if (r.message && r.message.supplier_items) {\n                        let matched = r.message.supplier_items.find(s => s.supplier === supplier);\n\n                        if (matched) {\n                            if (matched.custom_lead_time_in_days && frm.doc.transaction_date) {\n                                let expected_date = frappe.datetime.add_days(\n                                    frm.doc.transaction_date,\n                                    matched.custom_lead_time_in_days\n                                );\n                                frappe.model.set_value(cdt, cdn, \"expected_delivery_date\", expected_date);\n                            }\n\n                            if (matched.supplier_part_no) {\n                                frappe.model.set_value(cdt, cdn, \"supplier_part_no\", matched.supplier_part_no);\n                            }\n                        } else {\n                            // Clear if no match\n                            frappe.model.set_value(cdt, cdn, \"expected_delivery_date\", null);\n                            frappe.model.set_value(cdt, cdn, \"supplier_part_no\", null);\n                            frappe.msgprint(__('No matching supplier found in Item master for this item.'));\n                        }\n                    }\n                }\n            });\n        }\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2025-05-09 17:30:52.776762",
  "module": "Mohan Impex",
  "name": "Purchase Receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    refresh: function(frm) {\n        // ✅ Add 'Create GRN 2' button if submitted\n        if (frm.doc.docstatus === 1) {\n            frm.add_custom_button(__('Create GRN 2'), function() {\n                frappe.model.with_doctype('GRN 2', function() {\n                    let new_doc = frappe.model.get_new_doc('GRN 2');\n                    new_doc.purchase_receipt = frm.doc.name;\n                    new_doc.type = frm.doc.custom_type;\n                    new_doc.invoice_no = frm.doc.custom_invoice_no;\n                    new_doc.invoice_date = frm.doc.custom_invoice_date;\n\n                    frappe.set_route('Form', 'GRN 2', new_doc.name);\n                });\n            });\n        }\n\n        // ✅ Safely set custom_type from linked PO\n        if (frm.doc.name) {\n            frappe.call({\n                method: \"mohan_impex.PR_Connection.get_linked_purchase_order\",\n                args: { purchase_receipt: frm.doc.name },\n                callback: function(response) {\n                    if (response.message && typeof response.message === \"string\") {\n                        let purchase_order = response.message;\n                        let custom_type = '';\n\n                        if (purchase_order.startsWith(\"IMP\")) {\n                            custom_type = 'Import';\n                        } else if (purchase_order.startsWith(\"DOM\")) {\n                            custom_type = 'Domestic';\n                        }\n\n                        if (!frm.doc.custom_type || frm.doc.custom_type !== custom_type) {\n                            frm.set_value('custom_type', custom_type);\n                        }\n                    }\n                }\n            });\n        }\n\n        // ✅ Sync custom item details\n        sync_custom_item_details(frm);\n        set_item_code_filter(frm);\n    },\n\n    on_submit: function(frm) {\n        // ✅ Pull labour cost from linked PO\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            let purchase_order = frm.doc.items[0].purchase_order;\n\n            if (purchase_order) {\n                frappe.call({\n                    method: \"frappe.client.get_value\",\n                    args: {\n                        doctype: \"Purchase Order\",\n                        filters: { name: purchase_order },\n                        fieldname: \"custom_total_labour_cost\"\n                    },\n                    callback: function(response) {\n                        if (response.message) {\n                            let total_labour_cost = response.message.custom_total_labour_cost || 0;\n\n                            frappe.call({\n                                method: \"frappe.client.set_value\",\n                                args: {\n                                    doctype: \"Purchase Receipt\",\n                                    name: frm.doc.name,\n                                    fieldname: {\n                                        \"custom_total_labour_cost\": total_labour_cost\n                                    }\n                                },\n                                callback: function(update_response) {\n                                    if (!update_response.exc) {\n                                        frappe.msgprint(__('Total Labour Cost updated from Purchase Order: ₹' + total_labour_cost));\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n            } else {\n                frappe.msgprint(__('No linked Purchase Order found for this Purchase Receipt.'));\n            }\n        }\n    },\n\n    // ✅ Trigger custom_item_details sync on add/remove rows\n    items_add: function(frm, cdt, cdn) {\n        sync_custom_item_details(frm);\n    },\n    items_remove: function(frm, cdt, cdn) {\n        sync_custom_item_details(frm);\n    }\n});\n\n// ✅ Trigger custom_item_details sync on item field changes\nfrappe.ui.form.on('Purchase Receipt Item', {\n    qty: function(frm, cdt, cdn) {\n        sync_custom_item_details(frm);\n    },\n    rejected_qty: function(frm, cdt, cdn) {\n        sync_custom_item_details(frm);\n    },\n    rate: function(frm, cdt, cdn) {\n        sync_custom_item_details(frm);\n    },\n    batch_no: function(frm, cdt, cdn) {\n        sync_custom_item_details(frm);\n    }\n});\n\n// ✅ Function to sync custom_item_details table\nfunction sync_custom_item_details(frm) {\n    frm.clear_table('custom_item_details');\n\n    frm.doc.items.forEach(item => {\n        let new_row = frm.add_child('custom_item_details');\n\n        let expected_qty = item.qty + item.rejected_qty;\n        let received_qty = item.qty;\n\n        new_row.item_code    = item.item_code;\n        new_row.expected_qty = expected_qty;\n        new_row.received_qty = received_qty;\n        new_row.unit_price   = item.rate;\n        new_row.batch        = item.batch_no;\n\n        if (expected_qty === received_qty) {\n            new_row.condition = 'All okay';\n        } else if (received_qty < expected_qty) {\n            new_row.condition = 'Short';\n        }\n    });\n\n    frm.refresh_field('custom_item_details');\n}\nfrappe.ui.form.on('Purchase Receipt Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pick List",
  "enabled": 0,
  "modified": "2025-03-26 10:15:52.636847",
  "module": "Mohan Impex",
  "name": "Pick List",
  "script": "frappe.ui.form.on('Pick List', {\n    refresh: function(frm) {\n        if (!frm.doc.__islocal && frm.doc.docstatus === 1) {\n            frm.add_custom_button(__('Create Transport RFQ'), function() {\n                let new_doc = frappe.model.get_new_doc('Transport RFQ');\n                new_doc.pick_list = frm.doc.name;\n                new_doc.from_location = frm.doc.parent_warehouse;\n                new_doc.to_location = frm.doc.to_warehouse || '';  // Adjust if necessary\n                new_doc.transport_date = frappe.datetime.now_date();\n\n                frappe.set_route('Form', 'Transport RFQ', new_doc.name);\n            }, __('Create'));\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 0,
  "modified": "2024-12-27 11:21:43.010193",
  "module": "Mohan Impex",
  "name": "Brand Name for SP",
  "script": "frappe.ui.form.on('Supplier Quotation Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n\n\n ",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 0,
  "modified": "2024-12-27 11:24:45.610129",
  "module": "Mohan Impex",
  "name": "Brand Name for PI",
  "script": "frappe.ui.form.on('Purchase Invoice Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 0,
  "modified": "2024-12-27 11:29:30.065023",
  "module": "Mohan Impex",
  "name": "Request for Quotation Item",
  "script": "frappe.ui.form.on('Request for Quotation Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-12-27 18:06:25.392543",
  "module": "Mohan Impex",
  "name": "Total Number in MI",
  "script": "frappe.ui.form.on('Employee', {\n\trefresh(frm) {\n\t\t// Ensure that we set the value if the 'date_of_joining' is already set when the form lo\n\t},\n\tbefore_save(frm){\n\t    if (frm.doc.date_of_joining) {\n\t\t\tupdate_years_months_days(frm);\n\t\t}\n\t},\n\t// This will trigger whenever 'date_of_joining' field is changed\n\tdate_of_joining: function (frm) {\n\t\t// When the date_of_joining is changed, recalculate years, months, and days\n\t\tif (frm.doc.date_of_joining) {\n\t\t\tupdate_years_months_days(frm);\n\t\t}\n\t}\n});\nfunction update_years_months_days(frm) {\n\tconst joining_date = frm.doc.date_of_joining;\n\tconst current_date = frappe.datetime.nowdate();\n\t// Calculate the difference in days\n\tconst total_days_diff = frappe.datetime.get_diff(current_date, joining_date);\n\t// Calculate the number of full years\n\tconst years = Math.floor(total_days_diff / 365);\n\t// Calculate the remaining days after extracting years\n\tconst remaining_days_after_years = total_days_diff - years * 365;\n\t// Calculate the number of full months\n\tconst months = Math.floor(remaining_days_after_years / 30); // Approximate months (30 days p\n\t// Calculate the remaining days after extracting months\n\tconst remaining_days = remaining_days_after_years - months * 30; // Approximate remaining da\n\t// Format the result as \"X years Y months Z days\"\n\tlet years_and_months_days = `${years} years`;\n\tif (months > 0) {\n\t\tyears_and_months_days += ` ${months} months`;\n\t}\n\tif (remaining_days > 0) {\n\t\tyears_and_months_days += ` ${remaining_days} days`;\n\t}\n\t// Set the value in the custom field\n\tfrm.set_value('custom__total_number_of_year_in_mi', years_and_months_days);\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier Quotation",
  "enabled": 0,
  "modified": "2024-12-27 12:17:13.130096",
  "module": "Mohan Impex",
  "name": "Brand Name for SQ",
  "script": "frappe.ui.form.on('Supplier Quotation Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2025-04-18 13:56:40.438600",
  "module": "Mohan Impex",
  "name": "Brand Name for Quotation",
  "script": "frappe.ui.form.on(\"Quotation\", {\n    refresh(frm){\n        set_item_code_filter(frm)\n    }\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Blanket Order",
  "enabled": 0,
  "modified": "2024-12-27 14:23:25.670324",
  "module": "Mohan Impex",
  "name": "Brand Name for Blanket Order",
  "script": "frappe.ui.form.on('Blanket Order Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-12-27 14:48:27.768241",
  "module": "Mohan Impex",
  "name": "Brand Name for Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) {\n            // Clear the brand field if no item_code is selected\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            return;\n        }\n\n        // Fetch item details based on item_code\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: row.item_code,\n            },\n            callback: function (response) {\n                if (response.message) {\n                    const itemData = response.message;\n\n                    // Determine brand options\n                    let brandOptions = '';\n                    if (itemData.custom_select_brand && Array.isArray(itemData.custom_select_brand)) {\n                        brandOptions = itemData.custom_select_brand\n                            .map(obj => obj.brand_item)\n                            .join('\\n');\n                    } else if (itemData.brand_name) {\n                        brandOptions = itemData.brand_name;\n                    }\n\n                    // Update the brand field options or handle no brand options\n                    if (brandOptions) {\n                        // Update the options for the brand field in the grid row\n                        frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', brandOptions);\n\n                        // Clear the brand value to allow re-selection\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    } else {\n                        frappe.msgprint({\n                            title: __('No Brand Options'),\n                            message: __('No brand options available for the selected Item Code.'),\n                            indicator: 'orange',\n                        });\n                        frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    }\n                } else {\n                    frappe.msgprint({\n                        title: __('Item Not Found'),\n                        message: __('Item details not found for the given Item Code.'),\n                        indicator: 'red',\n                    });\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                }\n            },\n            error: function () {\n                frappe.msgprint({\n                    title: __('Error'),\n                    message: __('Unable to fetch Item details. Please try again later.'),\n                    indicator: 'red',\n                });\n                frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            },\n        });\n    },\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-03-22 17:59:48.140340",
  "module": "Mohan Impex",
  "name": "Sales Order",
  "script": "frappe.ui.form.on(\"Sales Order\", {\n    refresh(frm) {\n    \tset_item_code_filter(frm)\n\t}\n})\n\nfrappe.ui.form.on('Sales Order Item', {\n\titem_code(frm, cdt, cdn){\n\t    let row = locals[cdt][cdn];\n\t    update_item_catagory_price(frm, row)\n\t},\n\titem_category(frm, cdt, cdn){\n\t    let row = locals[cdt][cdn]\n\t    update_item_catagory_price(frm, row)\n\t},\n\tonload(frm) {\n        if (frm.is_new()) {\n            set_session_employee(frm)\n        }\n    },\n    before_save(frm) {\n        set_session_employee(frm)\n    }\n})\n\ncur_frm.set_query(\"customer\", function (frm) {\n  var filter_dict = {\n    customer_level: cur_frm.doc.customer_level,\n  }\n  if (cur_frm.doc.custom_channel_partner){\n    filter_dict.custom_channel_partner = cur_frm.doc.custom_channel_partner\n  }\n  return {\n    filters: filter_dict,\n  };\n});\n\nfunction set_item_code_filter(frm){\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n\nfunction set_session_employee(frm){\n  if(!frm.doc.created_by_emp){\n    frappe.call({\n      method: \"mohan_impex.mohan_impex.utils.get_session_employee\",\n      async:false,\n      callback: function (r) {\n        if (r.message) {\n          frm.set_value(\"created_by_emp\", r.message);\n          frm.refresh_field(\"created_by_emp\")\n        }\n      }\n    });\n  }\n}\n\nfunction update_item_catagory_price(frm, row) {\n    if (row.item_code && row.item_category && frm.doc.selling_price_list){\n        frappe.call({\n            method: \"mohan_impex.item_price.get_item_category_price\",\n            async: false,\n            args: {\n                \"item\" : row.item_code, \n                \"item_category\" : row.item_category, \n                \"price_list\" : frm.doc.selling_price_list\n            },\n            callback: function (r) {\n                let item_rate = r.message;\n                console.log(item_rate)\n                row.rate = item_rate\n                row.price_list_rate = item_rate\n                frm.refresh_field(\"items\")\n            }\n        });\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-03-21 10:31:39.738712",
  "module": "Mohan Impex",
  "name": "Employee",
  "script": "frappe.ui.form.on('Employee', {\n\trefresh(frm) {\n\t\tset_reports_to_filter(frm)\n\t},\n    role_profile(frm){\n        set_reports_to_filter(frm)\n    }\n})\n\nfunction set_reports_to_filter(frm){\n    if(frm.doc.role_profile){\n        frappe.call({\n            method: \"mohan_impex.mohan_impex.employee.get_reports_to_filter\",\n            async: false,\n            args: {\n                \"role\" : frm.doc.role_profile, \n            },\n            callback: function (r) {\n                frm.set_query('reports_to', ()=>{\n                    return {\n                        'filters': { role_profile: r.message }\n                    }\n                })\n            }\n        });\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 1,
  "modified": "2025-01-25 13:01:13.873996",
  "module": "Mohan Impex",
  "name": "User",
  "script": "frappe.ui.form.on('User', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tbefore_save(frm){\n\t    if (!frm.is_new()){\n\t        set_emp_role_profile(frm)\n\t    }\n\t}\n})\n\nfunction set_emp_role_profile(frm){\n    if (frm.doc.role_profile_name){\n        frappe.call({\n            method: \"mohan_impex.mohan_impex.user.update_emp_role_profile\",\n            async: false,\n            args: {\n                \"user\" : frm.doc.name,\n                \"role_profile\": frm.doc.role_profile_name\n            }\n        })\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2025-03-29 21:43:38.812298",
  "module": "Mohan Impex",
  "name": "Issue",
  "script": "frappe.ui.form.on('Issue', {\n    onload(frm) {\n        if (frm.is_new()) {\n            set_session_employee(frm)\n        }\n    },\n    before_save(frm) {\n        set_session_employee(frm)\n    },\n    after_workflow_action(frm){\n        if (frm.doc.status === \"Resolved\"){\n          frappe.db.set_value(\"Issue\", frm.doc.name, 'resolved_date', frappe.datetime.nowdate())\n        }\n    },\n})\n\nfunction set_session_employee(frm){\n  if(!frm.doc.created_by_emp){\n    frappe.call({\n      method: \"mohan_impex.mohan_impex.utils.get_session_employee\",\n      async:false,\n      callback: function (r) {\n        if (r.message) {\n          frm.set_value(\"created_by_emp\", r.message);\n          frm.refresh_field(\"created_by_emp\")\n        }\n      }\n    });\n  }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-03-29 21:44:39.700736",
  "module": "Mohan Impex",
  "name": "Customer",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tonload(frm) {\n        if (frm.is_new()) {\n            set_session_employee(frm)\n        }\n    },\n    before_save(frm) {\n        set_session_employee(frm)\n    },\n\tafter_workflow_action(frm){\n    if (frm.doc.workflow_state === \"KYC Completed\"){\n        frappe.call({\n            method: 'mohan_impex.mohan_impex.customer.update_kyc_status',\n            args: {\n                customer: frm.doc.name,\n                unv_customer: frm.doc.unv_customer\n            }\n        });\n        frappe.db.set_value(\"Customer\", frm.doc.name, 'kyc_complete_date', frappe.datetime.nowdate())\n    }\n  },\n})\n\nfunction set_session_employee(frm){\n  if(!frm.doc.created_by_emp){\n    frappe.call({\n      method: \"mohan_impex.mohan_impex.utils.get_session_employee\",\n      async:false,\n      callback: function (r) {\n        if (r.message) {\n          frm.set_value(\"created_by_emp\", r.message);\n          frm.refresh_field(\"created_by_emp\")\n        }\n      }\n    });\n  }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2025-03-22 16:20:33.502215",
  "module": "Mohan Impex",
  "name": "Address",
  "script": "frappe.ui.form.on('Address', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tdistrict(frm){\n        frm.set_value(\"city\", frm.doc.district)\n\t},\n\tbefore_save(frm){\n\t    frm.set_value(\"city\", frm.doc.district)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2025-04-18 13:55:43.613780",
  "module": "Mohan Impex",
  "name": "Quotation",
  "script": "frappe.ui.form.on('Quotation Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-05-26 15:57:31.066804",
  "module": "Mohan Impex",
  "name": "Delivery Note",
  "script": "frappe.ui.form.on('Delivery Note Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        // Clear brand if item_code is empty\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property(\n                'custom_select_brand',\n                'options',\n                ['']\n            );\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n\n                    // Update brand select options for the *specific row*\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n\n                    // Clear selected brand value to avoid mismatch\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n\n                    // Refresh only this row\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\nfrappe.ui.form.on(\"Delivery Note\", {\n    refresh(frm) {\n        set_item_code_filter(frm);\n    },\n});\n\nfunction set_item_code_filter(frm) {\n    frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        return {\n            filters: [\n                [\"has_variants\", \"=\", 0],\n                [\"is_sales_item\", \"=\", 1],\n                [\"variant_of\", \"=\", row.item_template]\n            ]\n        };\n    };\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-05-14 18:09:11.303959",
  "module": "Mohan Impex",
  "name": "Purchase Receipt Doc",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    onload: function(frm) {\n        frm.custom_tables_loaded = false;\n    },\n\n    refresh: function(frm) {\n        // Load tables only once for new documents daiyan\n        if (frm.is_new() && !frm.custom_tables_loaded) {\n\n            // STEP 1: Get linked PO and set custom_type\n            frappe.call({\n                method: \"mohan_impex.PR_Connection.get_linked_purchase_order\",\n                args: { purchase_receipt: frm.doc.name },\n                callback: function (response) {\n                    let purchase_order = response.message || '';\n                    let custom_type = '';\n\n                    if (purchase_order.startsWith(\"IMP\")) {\n                        custom_type = 'Import';\n                    } else if (purchase_order.startsWith(\"DOM\")) {\n                        custom_type = 'Domestic';\n                    }\n\n                    frm.set_value('custom_type', custom_type || 'Domestic').then(() => {\n                        // STEP 2: Load both tables\n                        load_custom_documents(frm);\n                        load_custom_item_details(frm);\n                        frm.custom_tables_loaded = true;\n                    });\n                }\n            });\n\n            // Fallback if call doesn't return in time\n            setTimeout(() => {\n                if (!frm.custom_tables_loaded && frm.doc.custom_type) {\n                    load_custom_documents(frm);\n                    load_custom_item_details(frm);\n                    frm.custom_tables_loaded = true;\n                }\n            }, 1000);\n        }\n\n        // Set item_code filter for each row\n        frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query = function (doc, cdt, cdn) {\n            let row = locals[cdt][cdn];\n            return {\n                filters: [\n                    [\"has_variants\", \"=\", 0],\n                    [\"is_sales_item\", \"=\", 1],\n                    [\"variant_of\", \"=\", row.item_template]\n                ]\n            };\n        };\n    },\n\n    validate: function(frm) {\n        // Re-sync custom_item_details on save\n        sync_custom_item_details(frm);\n\n        // Pull labour cost from linked PO\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            let purchase_order = frm.doc.items[0].purchase_order;\n            if (purchase_order) {\n                frappe.call({\n                    method: \"frappe.client.get_value\",\n                    args: {\n                        doctype: \"Purchase Order\",\n                        filters: { name: purchase_order },\n                        fieldname: \"custom_total_labour_cost\"\n                    },\n                    callback: function (response) {\n                        if (response.message) {\n                            let total = response.message.custom_total_labour_cost || 0;\n                            frm.set_value('custom_total_labour_cost', total);\n                        }\n                    }\n                });\n            }\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt Item', {\n    item_code: function (frm, cdt, cdn) {\n        const row = frappe.model.get_doc(cdt, cdn);\n\n        if (!row.item_code) {\n            frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n            frm.fields_dict.items.grid.update_docfield_property('custom_select_brand', 'options', ['']);\n            return;\n        }\n\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Item\",\n                name: row.item_code\n            },\n            callback: function (r) {\n                if (!r.exc && r.message) {\n                    const brand_table = r.message.custom_select_brand || [];\n                    const brand_options = brand_table.map(d => d.brand_item);\n                    frm.fields_dict.items.grid.update_docfield_property(\n                        'custom_select_brand',\n                        'options',\n                        [''].concat(brand_options)\n                    );\n                    frappe.model.set_value(cdt, cdn, 'custom_select_brand', '');\n                    frm.fields_dict.items.grid.refresh_row(row);\n                }\n            }\n        });\n    }\n});\n\n// ----------- Utilities ------------\n\nfunction load_custom_documents(frm) {\n    let docs = [];\n\n    if (frm.doc.custom_type === \"Domestic\") {\n        docs = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"External Test Report\", \"Additional Documents\"];\n    } else if (frm.doc.custom_type === \"Import\") {\n        docs = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"Halal Certificate (For Export)\", \"Kosher Certificate (For Export)\", \"External Test Report\", \"Additional Documents\"];\n    }\n\n    frm.clear_table('custom_documents');\n\n    docs.forEach(name => {\n        let row = frm.add_child('custom_documents');\n        row.document_name = name;\n    });\n\n    frm.refresh_field('custom_documents');\n    console.log(\"✅ Loaded custom_documents:\", cur_frm.doc.custom_documents);\n}\n\nfunction load_custom_item_details(frm) {\n    if (!frm.doc.items || frm.doc.items.length === 0) return;\n\n    frm.clear_table('custom_item_details');\n\n    frm.doc.items.forEach(item => {\n        if (!item.item_code) return;\n\n        let expected = flt(item.qty) + flt(item.rejected_qty || 0);\n        let received = flt(item.qty);\n\n        let row = frm.add_child('custom_item_details');\n        row.item_code = item.item_code;\n        row.expected_qty = expected;\n        row.received_qty = received;\n        row.unit_price = item.rate;\n        row.batch = item.batch_no;\n        row.condition = (expected === received) ? 'All okay' : 'Short';\n    });\n\n    frm.refresh_field('custom_item_details');\n    console.log(\"✅ Loaded custom_item_details:\", cur_frm.doc.custom_item_details);\n}\n\nfunction sync_custom_item_details(frm) {\n    if (!frm.doc.items || frm.doc.items.length === 0) return;\n\n    frm.clear_table('custom_item_details');\n\n    frm.doc.items.forEach(item => {\n        if (!item.item_code) return;\n\n        let expected = flt(item.qty) + flt(item.rejected_qty || 0);\n        let received = flt(item.qty);\n\n        let row = frm.add_child('custom_item_details');\n        row.item_code = item.item_code;\n        row.expected_qty = expected;\n        row.received_qty = received;\n        row.unit_price = item.rate;\n        row.batch = item.batch_no;\n        row.condition = (expected === received) ? 'All okay' : 'Short';\n    });\n\n    frm.refresh_field('custom_item_details');\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-05-24 14:08:15.262341",
  "module": null,
  "name": "PR WITH GRN2",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    purchase_order: function(frm) {\n        if (frm.doc.purchase_order) {\n            frappe.db.get_value('Purchase Order', frm.doc.purchase_order,\n                [\n                    'custom_asn_no',\n                    'custom_purchase_invoice',\n                    'custom_vehiclecontainer_number',\n                    'custom_purchase_invoice',\n                    'custom_invoice_date',\n                    'custom_transporter_name',\n                    'custom_expected_arrival_date_',\n                    'custom_driver_name',\n                    'custom_driver_mobile_number'\n                ]\n            ).then(r => {\n                if (r.message) {\n                    frm.set_value('custom_asn_no', r.message.custom_asn_no || '');\n                    frm.set_value('custom_invoice_no', r.message.custom_purchase_invoice);\n                    frm.set_value('custom_invoice_date', r.message.custom_invoice_date || '');\n                    frm.set_value('custom_transporters_name', r.message.custom_transporter_name || '');\n                    frm.set_value('custom_vehicle_no__container_no', r.message.custom_vehiclecontainer_number || '');\n                    frm.set_value('custom_expected_arrival_date_', r.message.custom_expected_arrival_date_ || '');\n                    frm.set_value('custom_driver_name', r.message.custom_driver_name || '');\n                    frm.set_value('custom_driver_mobile_number', r.message.custom_driver_mobile_number || '');\n                }\n            });\n        }\n    },\n    custom_type: function(frm) {\n        // Run only for NEW documents and only if table is empty daiyan\n        if (frm.is_new() && (!frm.doc.custom_documents || frm.doc.custom_documents.length === 0)) {\n            let default_documents = [];\n\n            if (frm.doc.custom_type === \"Domestic\") {\n                default_documents = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"External Test Report\", \"Additional Documents\"];\n            } else if (frm.doc.custom_type === \"Import\") {\n                default_documents = [\"Invoice Copy\", \"COA Copy\", \"E-way Bill\", \"Halal Certificate (For Export)\", \"Kosher Certificate (For Export)\", \"External Test Report\", \"Additional Documents\"];\n            }\n\n            // Clear the table first\n            frm.clear_table('custom_documents');\n\n            // Add new rows\n            default_documents.forEach(doc => {\n                let row = frm.add_child('custom_documents');\n                row.document_name = doc;\n            });\n\n            frm.refresh_field('custom_documents');\n            console.log(\"✅ Loaded custom_documents:\", cur_frm.doc.custom_documents);\n        }\n    },\n    after_save: function(frm) {\n    if (frm.doc.custom_asn_no) {\n        frappe.call({\n            method: \"frappe.client.set_value\",\n            args: {\n                doctype: \"Advance Supplier Notification\",\n                name: frm.doc.custom_asn_no,  // this is the ASN docname\n                fieldname: {\n                    purchase_receipt: frm.doc.name\n                }\n            },\n        });\n    }\n}\n\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-05-14 18:18:16.743351",
  "module": "Mohan Impex",
  "name": "Purchase Receipt Type Color",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    add_fields: [\"custom_type\"],  // Ensure field is available in list view\n    get_indicator: function(doc) {\n        if (doc.custom_type === \"Domestic\") {\n            return [__(\"Domestic\"), \"green\", \"custom_type,=,Domestic\"];\n        } else if (doc.custom_type === \"Import\") {\n            return [__(\"Import\"), \"yellow\", \"custom_type,=,Import\"];\n        }\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Advance Supplier Notification",
  "enabled": 1,
  "modified": "2025-05-24 12:19:31.738363",
  "module": "Mohan Impex",
  "name": "Advance Supplier Notification",
  "script": "frappe.ui.form.on('Advance Supplier Notification', {\n    after_save(frm) {\n        if (frm.doc.purchase_order) {\n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Purchase Order\",\n                    name: frm.doc.purchase_order,\n                    fieldname: {\n                        \"custom_asn_no\": frm.doc.name,\n                        \"custom_purchase_invoice\":frm.doc.purchase_invoice,\n                        \"custom_invoice_date\":frm.doc.invoice_date,\n                        \"custom_transporter_name\":frm.doc.transporter_name,\n                        \"custom_vehiclecontainer_number\":frm.doc.vehiclecontainer_number,\n                        \"custom_expected_arrival_date_\":frm.doc.expected_arrival_date,\n                        \"custom_driver_name\":frm.doc.driver_name,\n                        \"custom_driver_mobile_number\":frm.doc.driver_mobile_number,\n                        \"custom_asn_status\": frm.doc.asn_status\n                    }\n                },\n                callback: function(r) {\n                    if (!r.exc) {\n                        frappe.msgprint(`Updated: ${frm.doc.purchase_order}`);\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Transport RFQ",
  "enabled": 1,
  "modified": "2025-05-26 19:09:55.858191",
  "module": null,
  "name": "Transport RFQ1",
  "script": "frappe.ui.form.on('Transporter Details', {\n    transporter: function(frm, cdt, cdn) {\n        // Clear driver field when transporter changes\n        frappe.model.set_value(cdt, cdn, 'driver', '');\n\n        const row = locals[cdt][cdn];\n\n        // Call API to get transporter → drivers map\n        frappe.call({\n            method: \"mohan_impex.transporter.get_supplier_driver_map\",\n            callback: function(r) {\n                if (r.message) {\n                    const driver_map = r.message;\n                    const driver_list = driver_map[row.transporter] || [];\n\n                    // Set filtered options for driver field\n                    frappe.meta.get_docfield(\"Transporter Details\", \"driver\", frm.doc.name).options = \n                        driver_list.map(d => d.name);  // setting internal 'name' values\n\n                    // Optional: update link display field to show full_name\n                    frm.fields_dict.transporter_details.grid.update_docfield_property(\n                        \"driver\",\n                        \"get_query\",\n                        () => ({\n                            filters: {\n                                name: [\"in\", driver_list.map(d => d.name)]\n                            }\n                        })\n                    );\n\n                    frm.fields_dict.transporter_details.grid.refresh();\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-05-27 12:42:05.969441",
  "module": null,
  "name": "Sales Invoice1",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    onload: function(frm) {\n        // Avoid adding transport charges multiple times\n        const already_added = frm.doc.taxes.some(tax => tax.description === \"Transporter Charges\");\n        if (already_added) return;\n\n        // Get unique Delivery Notes from items table\n        const delivery_notes = [\n            ...new Set(\n                (frm.doc.items || [])\n                    .map(item => item.delivery_note)\n                    .filter(dn => dn)\n            )\n        ];\n\n        if (delivery_notes.length === 0) return;\n\n        // Now fetch each DN and total transport charges\n        let total_transport = 0;\n        let processed = 0;\n\n        delivery_notes.forEach(dn => {\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Delivery Note\",\n                    name: dn\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        let transport = r.message.custom_transport_charges || 0;\n                        total_transport += transport;\n                    }\n\n                    processed++;\n                    if (processed === delivery_notes.length && total_transport > 0) {\n                        let row = frm.add_child(\"taxes\");\n                        row.charge_type = \"Actual\";\n                        row.account_head = \"Sales Expenses - MISL\"; // Adjust this\n                        row.description = \"Transporter Charges\";\n                        row.tax_amount = total_transport;\n                        row.cost_center = \"Main - MISL\"; // Adjust this too\n                        frm.refresh_field(\"taxes\");\n                    }\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 }
]