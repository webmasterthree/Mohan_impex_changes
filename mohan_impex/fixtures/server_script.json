[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-13 18:45:09.532227",
  "module": null,
  "name": "atapi",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "import frappe\n\n@frappe.whitelist()\ndef get_employee_attendance_report():\n    try:\n        query = \"\"\"\n        SELECT \n            e.name AS EMPLOYEE_ID,\n            e.employee_name AS EMPLOYEE_NAME,\n            e.department AS DEPARTMENT,\n            IFNULL(DATE(ec.time), CURDATE()) AS DATE,\n            ec.device_id AS LOCATION,\n            ec.shift AS SHIFT,\n            TIME(ec.shift_start) AS SHIFT_START,\n            TIME(ec.shift_end) AS SHIFT_END,\n            MAX(CASE WHEN ec.log_type = 'IN' THEN TIME(ec.time) END) AS IN_TIME,  \n            MAX(CASE WHEN ec.log_type = 'OUT' THEN TIME(ec.time) END) AS OUT_TIME,\n            CASE\n                WHEN MAX(CASE WHEN ec.log_type = 'IN' THEN TIME(ec.time) END) > TIME(ec.shift_start) THEN\n                    TIMEDIFF(MAX(CASE WHEN ec.log_type = 'IN' THEN TIME(ec.time) END), TIME(ec.shift_start))\n                ELSE '00:00:00'\n            END AS LATE_BY,\n            CASE\n                WHEN MAX(CASE WHEN ec.log_type = 'OUT' THEN TIME(ec.time) END) < TIME(ec.shift_end) THEN\n                    TIMEDIFF(TIME(ec.shift_end), MAX(CASE WHEN ec.log_type = 'OUT' THEN TIME(ec.time) END))\n                ELSE '00:00:00'\n            END AS EARLY_BY,\n            CASE\n                WHEN MAX(CASE WHEN ec.log_type = 'IN' THEN TIME(ec.time) END) IS NOT NULL\n                     AND MAX(CASE WHEN ec.log_type = 'OUT' THEN TIME(ec.time) END) IS NOT NULL THEN\n                    TIMEDIFF(\n                        MAX(CASE WHEN ec.log_type = 'OUT' THEN TIME(ec.time) END),\n                        MAX(CASE WHEN ec.log_type = 'IN' THEN TIME(ec.time) END)\n                    )\n                ELSE '00:00:00'\n            END AS WORK_DURATION,\n            CASE\n                WHEN ec.time IS NULL THEN 'Absent'  \n                ELSE 'Present'  \n            END AS STATUS\n        FROM \n            tabEmployee e\n        LEFT JOIN \n            tabEmployee Checkin ec\n            ON e.name = ec.employee\n        GROUP BY \n            e.name, e.employee_name, e.department, DATE(ec.time), ec.shift, ec.shift_start, ec.shift_end\n        ORDER BY \n            DATE ASC, EMPLOYEE_ID ASC;\n        \"\"\"\n        \n        # Execute the query using Frappe's db.sql method\n        result = frappe.db.sql(query, as_dict=True)\n        \n        # If no data found, return a message\n        if not result:\n            return {\"message\": \"No data found.\"}\n        \n        # Return the query result\n        return {\"data\": result}\n    except Exception as e:\n        frappe.log_error(f\"Error in get_employee_attendance_report: {str(e)}\")\n        return {\"message\": f\"Error occurred: {str(e)}\"}\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-02-12 14:41:25.419407",
  "module": "Mohan Impex",
  "name": "remove emp from list",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "import frappe\n\ndef get_employees_list(doctype, txt, searchfield, start, page_len, filters):\n    # Fetch employees but exclude MI239\n    employees = frappe.get_all(\n        doctype, \n        filters=[[\"name\", \"!=\", \"MI239\"]],\n        fields=[\"name\", \"employee_name\", \"status\", \"department\"]\n    )\n    return employees\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-06-20 16:28:26.992304",
  "module": "Mohan Impex",
  "name": "Delivery Note-Sales Invoice Linked",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Sales Invoice",
  "script": "for item in doc.items:\n    if item.delivery_note:\n        # Set custom invoice status\n        frappe.db.set_value(\"Delivery Note\", item.delivery_note, \"invoice_status\", \"Invoiced\")\n\n        # Also set workflow_state if not already set\n        frappe.db.set_value(\"Delivery Note\", item.delivery_note, \"workflow_state\", \"Sales Invoice Generated\")\n\n# for item in doc.items:\n#     if item.delivery_note:\n#         frappe.db.set_value(\"Delivery Note\", item.delivery_note, \"invoice_status\", \"Invoiced\")\n",
  "script_type": "DocType Event"
 }
]